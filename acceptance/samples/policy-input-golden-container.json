{
  "attestations": [
    {
      "signatures": [
        {
          "keyid": "SHA256:IhiN7gY+Z3uSSd7tmj6w5Zfhqafzdhm3DZjIvGc6iYY",
          "sig": "MEUCIQDirgAKrft+Yh60eku+azDJx+G0RRqvc1dnUHY8ZCD+yQIgKEDrFB5iOkJtKuDMBmdVntS0QT7wTNQiG3MAAVp6EBw="
        }
      ],
      "statement": {
        "_type": "https://in-toto.io/Statement/v0.1",
        "predicate": {
          "buildConfig": {
            "tasks": [
              {
                "finishedOn": "2025-02-10T01:05:23Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-8bb2b01520f9440b-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "init",
                      "tekton.dev/task": "init"
                    }
                  },
                  "parameters": {
                    "image-url": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "rebuild": "false",
                    "skip-checks": "false"
                  }
                },
                "name": "init",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "init"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:63eb4a4c0cfb491276bff86fdad1c96bf238506388848e79001058450a8e843a"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "build",
                    "type": "string",
                    "value": "true"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:05:13Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\necho \"Build Initialize: $IMAGE_URL\"\necho\n\necho \"Determine if Image Already Exists\"\n# Build the image when rebuild is set to true or image does not exist\n# The image check comes last to avoid unnecessary, slow API calls\nif [ \"$REBUILD\" == \"true\" ] || [ \"$SKIP_CHECKS\" == \"false\" ] || ! skopeo inspect --no-tags --raw \"docker://$IMAGE_URL\" &>/dev/null; then\n  echo -n \"true\" > /tekton/results/build\nelse\n  echo -n \"false\" > /tekton/results/build\nfi\n",
                    "environment": {
                      "container": "init",
                      "image": "oci://registry.access.redhat.com/ubi9/skopeo@sha256:75cff96e239fb0669be73e94521be9703fc825272632c3f7a136efa8a04980c2"
                    }
                  }
                ]
              },
              {
                "after": [
                  "init"
                ],
                "finishedOn": "2025-02-10T01:05:39Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/categories": "Git",
                      "tekton.dev/displayName": "git clone",
                      "tekton.dev/pipelines.minVersion": "0.21.0",
                      "tekton.dev/platforms": "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64",
                      "tekton.dev/tags": "git",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-745676af38e54ce6-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "clone-repository",
                      "tekton.dev/task": "git-clone"
                    }
                  },
                  "parameters": {
                    "caTrustConfigMapKey": "ca-bundle.crt",
                    "caTrustConfigMapName": "trusted-ca",
                    "deleteExisting": "true",
                    "depth": "1",
                    "enableSymlinkCheck": "true",
                    "fetchTags": "false",
                    "gitInitImage": "",
                    "httpProxy": "",
                    "httpsProxy": "",
                    "noProxy": "",
                    "refspec": "",
                    "revision": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "shortCommitLength": "7",
                    "sparseCheckoutDirectories": "",
                    "sslVerify": "true",
                    "subdirectory": "source",
                    "submodules": "true",
                    "url": "https://github.com/conforma/golden-container",
                    "userHome": "/tekton/home",
                    "verbose": "false"
                  }
                },
                "name": "clone-repository",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "git-clone"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1@sha256:d091a9e19567a4cbdc5acd57903c71ba71dc51d749a4ba7477e689608851e981"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "CHAINS-GIT_COMMIT",
                    "type": "string",
                    "value": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
                  },
                  {
                    "name": "CHAINS-GIT_URL",
                    "type": "string",
                    "value": "https://github.com/conforma/golden-container"
                  },
                  {
                    "name": "commit",
                    "type": "string",
                    "value": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
                  },
                  {
                    "name": "commit-timestamp",
                    "type": "string",
                    "value": "1739149502"
                  },
                  {
                    "name": "short-commit",
                    "type": "string",
                    "value": "d11c0ad"
                  },
                  {
                    "name": "url",
                    "type": "string",
                    "value": "https://github.com/conforma/golden-container"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:05:23Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env sh\nset -eu\n\nif [ \"${PARAM_VERBOSE}\" = \"true\" ] ; then\n  set -x\nfi\n\nif [ -n \"${PARAM_GIT_INIT_IMAGE}\" ]; then\n  echo \"WARNING: provided deprecated gitInitImage parameter has no effect.\"\nfi\n\nif [ \"${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  if [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" ] && [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" ]; then\n    cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" \"${PARAM_USER_HOME}/.git-credentials\"\n    cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" \"${PARAM_USER_HOME}/.gitconfig\"\n  # Compatibility with kubernetes.io/basic-auth secrets\n  elif [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/username\" ] && [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/password\" ]; then\n    HOSTNAME=$(echo $PARAM_URL | awk -F/ '{print $3}')\n    echo \"https://$(cat ${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/username):$(cat ${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/password)@$HOSTNAME\" > \"${PARAM_USER_HOME}/.git-credentials\"\n    echo -e \"[credential \\\"https://$HOSTNAME\\\"]\\n  helper = store\" > \"${PARAM_USER_HOME}/.gitconfig\"\n  else\n    echo \"Unknown basic-auth workspace format\"\n    exit 1\n  fi\n  chmod 400 \"${PARAM_USER_HOME}/.git-credentials\"\n  chmod 400 \"${PARAM_USER_HOME}/.gitconfig\"\nfi\n\n# Should be called after the gitconfig is copied from the repository secret\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  git config --global http.sslCAInfo \"$ca_bundle\"\nfi\n\nif [ \"${WORKSPACE_SSH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp -R \"${WORKSPACE_SSH_DIRECTORY_PATH}\" \"${PARAM_USER_HOME}\"/.ssh\n  chmod 700 \"${PARAM_USER_HOME}\"/.ssh\n  chmod -R 400 \"${PARAM_USER_HOME}\"/.ssh/*\nfi\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\n\ncleandir() {\n  # Delete any existing contents of the repo directory if it exists.\n  #\n  # We don't just \"rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR} might be \"/\"\n  # or the root of a mounted volume.\n  if [ -d \"${CHECKOUT_DIR}\" ] ; then\n    # Delete non-hidden files and directories\n    rm -rf \"${CHECKOUT_DIR:?}\"/*\n    # Delete files and directories starting with . but excluding ..\n    rm -rf \"${CHECKOUT_DIR}\"/.[!.]*\n    # Delete files and directories starting with .. plus any other character\n    rm -rf \"${CHECKOUT_DIR}\"/..?*\n  fi\n}\n\nif [ \"${PARAM_DELETE_EXISTING}\" = \"true\" ] ; then\n  cleandir\nfi\n\ntest -z \"${PARAM_HTTP_PROXY}\" || export HTTP_PROXY=\"${PARAM_HTTP_PROXY}\"\ntest -z \"${PARAM_HTTPS_PROXY}\" || export HTTPS_PROXY=\"${PARAM_HTTPS_PROXY}\"\ntest -z \"${PARAM_NO_PROXY}\" || export NO_PROXY=\"${PARAM_NO_PROXY}\"\n\n/ko-app/git-init \\\n  -url=\"${PARAM_URL}\" \\\n  -revision=\"${PARAM_REVISION}\" \\\n  -refspec=\"${PARAM_REFSPEC}\" \\\n  -path=\"${CHECKOUT_DIR}\" \\\n  -sslVerify=\"${PARAM_SSL_VERIFY}\" \\\n  -submodules=\"${PARAM_SUBMODULES}\" \\\n  -depth=\"${PARAM_DEPTH}\" \\\n  -sparseCheckoutDirectories=\"${PARAM_SPARSE_CHECKOUT_DIRECTORIES}\"\ncd \"${CHECKOUT_DIR}\"\nRESULT_SHA=\"$(git rev-parse HEAD)\"\nRESULT_SHA_SHORT=\"$(git rev-parse --short=\"${PARAM_SHORT_COMMIT_LENGTH}\" HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"${EXIT_CODE}\" != 0 ] ; then\n  exit \"${EXIT_CODE}\"\nfi\nprintf \"%s\" \"${RESULT_SHA}\" > \"/tekton/results/commit\"\nprintf \"%s\" \"${RESULT_SHA}\" > \"/tekton/results/CHAINS-GIT_COMMIT\"\nprintf \"%s\" \"${RESULT_SHA_SHORT}\" > \"/tekton/results/short-commit\"\nprintf \"%s\" \"${PARAM_URL}\" > \"/tekton/results/url\"\nprintf \"%s\" \"${PARAM_URL}\" > \"/tekton/results/CHAINS-GIT_URL\"\nprintf \"%s\" \"$(git log -1 --pretty=%ct)\" > \"/tekton/results/commit-timestamp\"\n\nif [ \"${PARAM_FETCH_TAGS}\" = \"true\" ] ; then\n  echo \"Fetching tags\"\n  git fetch --tags\nfi\n",
                    "environment": {
                      "container": "clone",
                      "image": "oci://quay.io/konflux-ci/git-clone@sha256:4e53ebd9242f05ca55bfc8d58b3363d8b9d9bc3ab439d9ab76cdbdf5b1fd42d9"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\ncheck_symlinks() {\n  FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=false\n  while read symlink\n  do\n    target=$(readlink -m \"$symlink\")\n    if ! [[ \"$target\" =~ ^$CHECKOUT_DIR ]]; then\n      echo \"The cloned repository contains symlink pointing outside of the cloned repository: $symlink\"\n      FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=true\n    fi\n  done < <(find $CHECKOUT_DIR -type l -print)\n  if [ \"$FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO\" = true ] ; then\n    return 1\n  fi\n}\n\nif [ \"${PARAM_ENABLE_SYMLINK_CHECK}\" = \"true\" ] ; then\n  echo \"Running symlink check\"\n  check_symlinks\nfi\n",
                    "environment": {
                      "container": "symlink-check",
                      "image": "oci://quay.io/konflux-ci/git-clone@sha256:4e53ebd9242f05ca55bfc8d58b3363d8b9d9bc3ab439d9ab76cdbdf5b1fd42d9"
                    }
                  }
                ]
              },
              {
                "after": [
                  "clone-repository"
                ],
                "finishedOn": "2025-02-10T01:05:58Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "image-build, konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-c6465d480208bb49-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "prefetch-dependencies",
                      "tekton.dev/task": "prefetch-dependencies"
                    }
                  },
                  "parameters": {
                    "ACTIVATION_KEY": "activation-key",
                    "caTrustConfigMapKey": "ca-bundle.crt",
                    "caTrustConfigMapName": "trusted-ca",
                    "config-file-content": "",
                    "dev-package-managers": "false",
                    "input": "",
                    "log-level": "info",
                    "sbom-type": "spdx"
                  }
                },
                "name": "prefetch-dependencies",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "prefetch-dependencies"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies:0.2@sha256:54d41cb14ef76d73f372a7e4e8aeef4c2a667e937049398a056408916db727ac"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:05:39Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "if [ -n \"${CONFIG_FILE_CONTENT}\" ]\nthen\n  # we need to drop 'goproxy_url' for safety reasons until cachi2 decides what the SBOM\n  # impact of this configuration option will be:\n  # https://github.com/containerbuildsystem/cachi2/issues/577\n  yq 'del(.goproxy_url)' <<< \"${CONFIG_FILE_CONTENT}\" > /mnt/config/config.yaml\nfi\n",
                    "environment": {
                      "container": "sanitize-cachi2-config-file-with-yq",
                      "image": "oci://quay.io/konflux-ci/yq@sha256:fcf901ff1985e1d594bef9ee0992cd7e379152dd3e7181f5df6171770021678c"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -euo pipefail\n\nRHSM_ORG=\"\"\nRHSM_ACT_KEY=\"\"\nENTITLEMENT_CERT_PATH=\"\"\nENTITLEMENT_CERT_KEY_PATH=\"\"\n\nfunction rhsm_unregister {\n  # best effort:\n  #   - if the system was already successfully unregistered, the command returns 1\n  #   - if unregistering failed/fails, there's not much we can do about it anyway\n  subscription-manager unregister || true\n}\n\nfunction inject_ssl_opts\n{\n  input=\"$1\"\n  ssl_options=\"$2\"\n\n  # Check if input is plain string or JSON and if the request specifies RPMs\n  if [ \"$input\" == \"rpm\" ]; then\n    input=\"$(jq -n --argjson ssl \"$ssl_options\" '\n              {\n                type: \"rpm\",\n                options: {\n                  ssl: $ssl\n                }\n              }'\n            )\"\n  elif (jq . 2>/dev/null 1>&2 <<< \"$input\"); then\n    # The input JSON can be in one of these forms:\n    # 1) '[{\"type\": \"gomod\"}, {\"type\": \"bundler\"}]'\n    # 2) '{\"packages\": [{\"type\": \"gomod\"}, {\"type\": \"bundler\"}]}'\n    # 3) '{\"type\": \"gomod\"}'\n    input_json_has_rpm=\"$(jq '\n                            if (type == \"array\" or type == \"object\") | not then\n                              false\n                            elif type == \"array\" then\n                              any(.[]; .type == \"rpm\")\n                            elif has(\"packages\") | not then\n                              .type == \"rpm\"\n                            elif (.packages | type == \"array\") then\n                              any(.packages[]; .type == \"rpm\")\n                            else\n                              false\n                            end' <<< \"$input\")\"\n\n    # The output JSON may need the SSL options updated for the RPM backend\n    if [ \"$input_json_has_rpm\" == \"true\" ]; then\n        input=\"$(jq \\\n                  --argjson ssl \"$ssl_options\" '\n                    if type == \"array\" then\n                      map(if .type == \"rpm\" then .options.ssl += $ssl else . end)\n                    elif has(\"packages\") then\n                      .packages |= map(if .type == \"rpm\" then .options.ssl += $ssl else . end)\n                    else\n                      .options.ssl += $ssl\n                    end' \\\n                    <<< \"$input\"\n                )\"\n    fi\n  fi\n  echo \"$input\"\n}\n\nif [ -z \"${INPUT}\" ]; then\n  # Confirm input was provided though it's likely the whole task would be skipped if it wasn't\n  echo \"No prefetch will be performed because no input was provided for cachi2 fetch-deps\"\n  exit 0\nfi\n\nif [ -f /mnt/config/config.yaml ]; then\n  config_flag=--config-file=/mnt/config/config.yaml\nelse\n  config_flag=\"\"\nfi\n\nif [ \"$DEV_PACKAGE_MANAGERS\" = \"true\" ]; then\n  dev_pacman_flag=--dev-package-managers\nelse\n  dev_pacman_flag=\"\"\nfi\n\n# Copied from https://github.com/konflux-ci/build-definitions/blob/main/task/git-clone/0.1/git-clone.yaml\nif [ \"${WORKSPACE_GIT_AUTH_BOUND}\" = \"true\" ] ; then\n  if [ -f \"${WORKSPACE_GIT_AUTH_PATH}/.git-credentials\" ] && [ -f \"${WORKSPACE_GIT_AUTH_PATH}/.gitconfig\" ]; then\n    cp \"${WORKSPACE_GIT_AUTH_PATH}/.git-credentials\" \"${HOME}/.git-credentials\"\n    cp \"${WORKSPACE_GIT_AUTH_PATH}/.gitconfig\" \"${HOME}/.gitconfig\"\n  # Compatibility with kubernetes.io/basic-auth secrets\n  elif [ -f \"${WORKSPACE_GIT_AUTH_PATH}/username\" ] && [ -f \"${WORKSPACE_GIT_AUTH_PATH}/password\" ]; then\n    HOSTNAME=$(cd \"/workspace/source/source\" && git remote get-url origin | awk -F/ '{print $3}')\n    echo \"https://$(cat ${WORKSPACE_GIT_AUTH_PATH}/username):$(cat ${WORKSPACE_GIT_AUTH_PATH}/password)@$HOSTNAME\" > \"${HOME}/.git-credentials\"\n    echo -e \"[credential \\\"https://$HOSTNAME\\\"]\\n  helper = store\" > \"${HOME}/.gitconfig\"\n  else\n    echo \"Unknown git-basic-auth workspace format\"\n    exit 1\n  fi\n  chmod 400 \"${HOME}/.git-credentials\"\n  chmod 400 \"${HOME}/.gitconfig\"\nfi\n\nif [ \"${WORKSPACE_NETRC_BOUND}\" = \"true\" ]; then\n  cp \"${WORKSPACE_NETRC_PATH}/.netrc\" \"${HOME}/.netrc\"\nfi\n\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\n# RHSM HANDLING: REGISTER RHSM & CACHI2 CONFIGURATION\nif [ -e /activation-key/org ]; then\n  RHSM_ORG=$(cat /activation-key/org)\n  RHSM_ACT_KEY=$(cat /activation-key/activationkey)\n\n  echo \"Registering with Red Hat subscription manager.\"\n  subscription-manager register \\\n      --org \"${RHSM_ORG}\" \\\n      --activationkey \"${RHSM_ACT_KEY}\" || exit 1\n\n  trap rhsm_unregister EXIT\n\n  entitlement_files=\"$(ls -1 /etc/pki/entitlement/*.pem)\"\n  ENTITLEMENT_CERT_KEY_PATH=\"$(grep -e '-key.pem$' <<< \"$entitlement_files\")\"\n  ENTITLEMENT_CERT_PATH=\"$(grep -v -e '-key.pem$' <<< \"$entitlement_files\")\"\n  CA_BUNDLE_PATH=\"/etc/rhsm/ca/redhat-uep.pem\"\n\n  CACHI2_SSL_OPTS=\"$(jq -n \\\n                        --arg key \"$ENTITLEMENT_CERT_KEY_PATH\" \\\n                        --arg cert \"$ENTITLEMENT_CERT_PATH\" \\\n                        --arg ca_bundle \"$CA_BUNDLE_PATH\" \\\n                        '{client_key: $key, client_cert: $cert, ca_bundle: $ca_bundle}'\n                    )\"\n\n  # We need to modify the cachi2 params in place if we're processing RPMs\n  INPUT=$(inject_ssl_opts \"$INPUT\" \"$CACHI2_SSL_OPTS\")\nfi\n\ncachi2 --log-level=\"$LOG_LEVEL\" $config_flag fetch-deps \\\n$dev_pacman_flag \\\n--source=/workspace/source/source \\\n--output=/workspace/source/cachi2/output \\\n--sbom-output-type=\"$SBOM_TYPE\" \\\n\"${INPUT}\"\n\ncachi2 --log-level=\"$LOG_LEVEL\" generate-env /workspace/source/cachi2/output \\\n--format env \\\n--for-output-dir=/cachi2/output \\\n--output /workspace/source/cachi2/cachi2.env\n\ncachi2 --log-level=\"$LOG_LEVEL\" inject-files /workspace/source/cachi2/output \\\n--for-output-dir=/cachi2/output\n\n# hack: the OCI generator would delete the function since it doesn't consider trap a \"usage\"\nif false; then\n  rhsm_unregister\nfi\n",
                    "environment": {
                      "container": "prefetch-dependencies",
                      "image": "oci://quay.io/konflux-ci/cachi2@sha256:80402886bbc0f6b4deba65cf5f66dfe9a2c01ae0b57bf3454e3ea58e1a395720"
                    }
                  }
                ]
              },
              {
                "after": [
                  "prefetch-dependencies",
                  "clone-repository",
                  "init"
                ],
                "finishedOn": "2025-02-10T01:11:22Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "image-build, konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-8b91dea633afd7be-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "build.appstudio.redhat.com/build_type": "docker",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "build-container-amd64",
                      "tekton.dev/task": "buildah"
                    }
                  },
                  "parameters": {
                    "ACTIVATION_KEY": "activation-key",
                    "ADDITIONAL_SECRET": "does-not-exist",
                    "ADD_CAPABILITIES": "",
                    "BUILD_ARGS": [],
                    "BUILD_ARGS_FILE": "",
                    "COMMIT_SHA": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "CONTEXT": ".",
                    "DOCKERFILE": "Containerfile",
                    "ENTITLEMENT_SECRET": "etc-pki-entitlement",
                    "HERMETIC": "true",
                    "IMAGE": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-amd64",
                    "IMAGE_EXPIRES_AFTER": "",
                    "LABELS": [],
                    "PREFETCH_INPUT": "",
                    "PRIVILEGED_NESTED": "false",
                    "SKIP_SBOM_GENERATION": "false",
                    "SKIP_UNUSED_STAGES": "true",
                    "SQUASH": "false",
                    "STORAGE_DRIVER": "vfs",
                    "TARGET_STAGE": "",
                    "TLSVERIFY": "true",
                    "YUM_REPOS_D_FETCHED": "fetched.repos.d",
                    "YUM_REPOS_D_SRC": "repos.d",
                    "YUM_REPOS_D_TARGET": "/etc/yum.repos.d",
                    "caTrustConfigMapKey": "ca-bundle.crt",
                    "caTrustConfigMapName": "trusted-ca"
                  }
                },
                "name": "build-container-amd64",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "buildah"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-buildah:0.2@sha256:767eccc40ad8482254ec3425c84fe828655ec663abb8e07b4b7479cb851f50e6"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGE_DIGEST",
                    "type": "string",
                    "value": "sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b"
                  },
                  {
                    "name": "IMAGE_REF",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-amd64@sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b"
                  },
                  {
                    "name": "IMAGE_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-amd64"
                  },
                  {
                    "name": "JAVA_COMMUNITY_DEPENDENCIES",
                    "type": "string",
                    "value": ""
                  },
                  {
                    "name": "SBOM_BLOB_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:c9839c45f91da486ecf855467600ab89e176603687e72bc8a5321aa440d7b58d"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:05:58Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": [
                      "--build-args",
                      "--labels"
                    ],
                    "entryPoint": "#!/bin/bash\nset -euo pipefail\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\nif [ -e \"$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE\" ]; then\n  dockerfile_path=\"$(pwd)/$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE\"\nelif [ -e \"$SOURCE_CODE_DIR/$DOCKERFILE\" ]; then\n  dockerfile_path=\"$(pwd)/$SOURCE_CODE_DIR/$DOCKERFILE\"\nelif [ -e \"$DOCKERFILE\" ]; then\n  # Instrumented builds (SAST) use this custom dockerffile step as their base\n  dockerfile_path=\"$DOCKERFILE\"\nelif echo \"$DOCKERFILE\" | grep -q \"^https\\?://\"; then\n  echo \"Fetch Dockerfile from $DOCKERFILE\"\n  dockerfile_path=$(mktemp --suffix=-Dockerfile)\n  http_code=$(curl -s -S -L -w \"%{http_code}\" --output \"$dockerfile_path\" \"$DOCKERFILE\")\n  if [ $http_code != 200 ]; then\n    echo \"No Dockerfile is fetched. Server responds $http_code\"\n    exit 1\n  fi\n  http_code=$(curl -s -S -L -w \"%{http_code}\" --output \"$dockerfile_path.dockerignore.tmp\" \"$DOCKERFILE.dockerignore\")\n  if [ $http_code = 200 ]; then\n    echo \"Fetched .dockerignore from $DOCKERFILE.dockerignore\"\n    mv \"$dockerfile_path.dockerignore.tmp\" $SOURCE_CODE_DIR/$CONTEXT/.dockerignore\n  fi\nelse\n  echo \"Cannot find Dockerfile $DOCKERFILE\"\n  exit 1\nfi\n\ndockerfile_copy=$(mktemp --tmpdir \"$(basename \"$dockerfile_path\").XXXXXX\")\ncp \"$dockerfile_path\" \"$dockerfile_copy\"\n\nif [ -n \"${JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR-}\" ] && grep -q '^\\s*RUN \\(./\\)\\?mvn' \"$dockerfile_copy\"; then\n  sed -i -e \"s|^\\s*RUN \\(\\(./\\)\\?mvn\\)\\(.*\\)|RUN echo \\\"<settings><mirrors><mirror><id>mirror.default</id><url>http://$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR/v1/cache/default/0/</url><mirrorOf>*</mirrorOf></mirror></mirrors></settings>\\\" > /tmp/settings.yaml; \\1 -s /tmp/settings.yaml \\3|g\" \"$dockerfile_copy\"\n  touch /var/lib/containers/java\nfi\n\n# Fixing group permission on /var/lib/containers\nchown root:root /var/lib/containers\n\nsed -i 's/^\\s*short-name-mode\\s*=\\s*.*/short-name-mode = \"disabled\"/' /etc/containers/registries.conf\n\n# Setting new namespace to run buildah - 2^32-2\necho 'root:1:4294967294' | tee -a /etc/subuid >> /etc/subgid\n\nbuild_args=()\nif [ -n \"${BUILD_ARGS_FILE}\" ]; then\n  # Parse BUILD_ARGS_FILE ourselves because dockerfile-json doesn't support it\n  echo \"Parsing ARGs from $BUILD_ARGS_FILE\"\n  mapfile -t build_args < <(\n    # https://www.mankier.com/1/buildah-build#--build-arg-file\n    # delete lines that start with #\n    # delete blank lines\n    sed -e '/^#/d' -e '/^\\s*$/d' \"${SOURCE_CODE_DIR}/${BUILD_ARGS_FILE}\"\n  )\nfi\n\nLABELS=()\n# Split `args` into two sets of arguments.\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --build-args)\n            shift\n            # Note: this may result in multiple --build-arg=KEY=value flags with the same KEY being\n            # passed to buildah. In that case, the *last* occurrence takes precedence. This is why\n            # we append BUILD_ARGS after the content of the BUILD_ARGS_FILE\n            while [[ $# -gt 0 && $1 != --* ]]; do build_args+=(\"$1\"); shift; done\n            ;;\n        --labels)\n            shift\n            while [[ $# -gt 0 && $1 != --* ]]; do LABELS+=(\"--label\" \"$1\"); shift; done\n            ;;\n        *)\n            echo \"unexpected argument: $1\" >&2\n            exit 2\n            ;;\n    esac\ndone\n\nBUILD_ARG_FLAGS=()\nfor build_arg in \"${build_args[@]}\"; do\n  BUILD_ARG_FLAGS+=(\"--build-arg=$build_arg\")\ndone\n\ndockerfile-json \"${BUILD_ARG_FLAGS[@]}\" \"$dockerfile_copy\" > /shared/parsed_dockerfile.json\nBASE_IMAGES=$(\n    jq -r '.Stages[] | select(.From | .Stage or .Scratch | not) | .BaseName | select(test(\"^oci-archive:\") | not)' /shared/parsed_dockerfile.json\n)\n\nBUILDAH_ARGS=()\nUNSHARE_ARGS=()\n\nif [ \"${HERMETIC}\" == \"true\" ]; then\n  BUILDAH_ARGS+=(\"--pull=never\")\n  UNSHARE_ARGS+=(\"--net\")\n\n  for image in $BASE_IMAGES; do\n    unshare -Ufp --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -- buildah pull $image\n  done\n  echo \"Build will be executed with network isolation\"\nfi\n\nif [ -n \"${TARGET_STAGE}\" ]; then\n  BUILDAH_ARGS+=(\"--target=${TARGET_STAGE}\")\nfi\n\nBUILDAH_ARGS+=(\"${BUILD_ARG_FLAGS[@]}\")\n\nif [ \"${PRIVILEGED_NESTED}\" == \"true\" ]; then\n  BUILDAH_ARGS+=(\"--security-opt=label=disable\")\n  BUILDAH_ARGS+=(\"--cap-add=all\")\n  BUILDAH_ARGS+=(\"--device=/dev/fuse\")\nfi\n\nif [ -n \"${ADD_CAPABILITIES}\" ]; then\n  BUILDAH_ARGS+=(\"--cap-add=${ADD_CAPABILITIES}\")\nfi\n\nif [ \"${SQUASH}\" == \"true\" ]; then\n  BUILDAH_ARGS+=(\"--squash\")\nfi\n\nif [ \"${SKIP_UNUSED_STAGES}\" != \"true\" ] ; then\n  BUILDAH_ARGS+=(\"--skip-unused-stages=false\")\nfi\n\nVOLUME_MOUNTS=()\n\nif [ -f \"/workspace/source/cachi2/cachi2.env\" ]; then\n  cp -r \"/workspace/source/cachi2\" /tmp/\n  chmod -R go+rwX /tmp/cachi2\n  VOLUME_MOUNTS+=(--volume /tmp/cachi2:/cachi2)\n  # Read in the whole file (https://unix.stackexchange.com/questions/533277), then\n  # for each RUN ... line insert the cachi2.env command *after* any options like --mount\n  sed -E -i \\\n      -e 'H;1h;$!d;x' \\\n      -e 's@^\\s*(run((\\s|\\\\\\n)+-\\S+)*(\\s|\\\\\\n)+)@\\1. /cachi2/cachi2.env \\&\\& \\\\\\n    @igM' \\\n      \"$dockerfile_copy\"\n  echo \"Prefetched content will be made available\"\n\n  prefetched_repo_for_my_arch=\"/tmp/cachi2/output/deps/rpm/$(uname -m)/repos.d/cachi2.repo\"\n  if [ -f \"$prefetched_repo_for_my_arch\" ]; then\n    echo \"Adding $prefetched_repo_for_my_arch to $YUM_REPOS_D_FETCHED\"\n    mkdir -p \"$YUM_REPOS_D_FETCHED\"\n    cp --no-clobber \"$prefetched_repo_for_my_arch\" \"$YUM_REPOS_D_FETCHED\"\n  fi\nfi\n\n# if yum repofiles stored in git, copy them to mount point outside the source dir\nif [ -d \"${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}\" ]; then\n  mkdir -p ${YUM_REPOS_D_FETCHED}\n  cp -r ${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}/* ${YUM_REPOS_D_FETCHED}\nfi\n\n# if anything in the repofiles mount point (either fetched or from git), mount it\nif [ -d \"${YUM_REPOS_D_FETCHED}\" ]; then\n  chmod -R go+rwX ${YUM_REPOS_D_FETCHED}\n  mount_point=$(realpath ${YUM_REPOS_D_FETCHED})\n  VOLUME_MOUNTS+=(--volume \"${mount_point}:${YUM_REPOS_D_TARGET}\")\nfi\n\nDEFAULT_LABELS=(\n  \"--label\" \"build-date=$(date -u +'%Y-%m-%dT%H:%M:%S')\"\n  \"--label\" \"architecture=$(uname -m)\"\n  \"--label\" \"vcs-type=git\"\n)\n[ -n \"$COMMIT_SHA\" ] && DEFAULT_LABELS+=(\"--label\" \"vcs-ref=$COMMIT_SHA\")\n[ -n \"$IMAGE_EXPIRES_AFTER\" ] && DEFAULT_LABELS+=(\"--label\" \"quay.expires-after=$IMAGE_EXPIRES_AFTER\")\n\n# Concatenate defaults and explicit labels. If a label appears twice, the last one wins.\nLABELS=(\"${DEFAULT_LABELS[@]}\" \"${LABELS[@]}\")\n\nACTIVATION_KEY_PATH=\"/activation-key\"\nENTITLEMENT_PATH=\"/entitlement\"\n\n# 0. if hermetic=true, skip all subscription related stuff\n# 1. do not enable activation key and entitlement at same time. If both vars are provided, prefer activation key.\n# 2. Activation-keys will be used when the key 'org' exists in the activation key secret.\n# 3. try to pre-register and mount files to the correct location so that users do no need to modify Dockerfiles.\n# 3. If the Dockerfile contains the string \"subcription-manager register\", add the activation-keys volume\n#    to buildah but don't pre-register for backwards compatibility. Mount an empty directory on\n#    shared emptydir volume to \"/etc/pki/entitlement\" to prevent certificates from being included\n\nif [ \"${HERMETIC}\" != \"true\" ] && [ -e /activation-key/org ]; then\n  cp -r --preserve=mode \"$ACTIVATION_KEY_PATH\" /tmp/activation-key\n  mkdir -p /shared/rhsm/etc/pki/entitlement\n  mkdir -p /shared/rhsm/etc/pki/consumer\n\n  VOLUME_MOUNTS+=(-v /tmp/activation-key:/activation-key \\\n                  -v /shared/rhsm/etc/pki/entitlement:/etc/pki/entitlement:Z \\\n                  -v /shared/rhsm/etc/pki/consumer:/etc/pki/consumer:Z)\n  echo \"Adding activation key to the build\"\n\n  if ! grep -E \"^[^#]*subscription-manager.[^#]*register\" \"$dockerfile_path\"; then\n    # user is not running registration in the Containerfile: pre-register.\n    echo \"Pre-registering with subscription manager.\"\n    subscription-manager register --org \"$(cat /tmp/activation-key/org)\" --activationkey \"$(cat /tmp/activation-key/activationkey)\"\n    trap 'subscription-manager unregister || true' EXIT\n\n    # copy generated certificates to /shared volume\n    cp /etc/pki/entitlement/*.pem /shared/rhsm/etc/pki/entitlement\n    cp /etc/pki/consumer/*.pem /shared/rhsm/etc/pki/consumer\n\n    # and then mount get /etc/rhsm/ca/redhat-uep.pem into /run/secrets/rhsm/ca\n    VOLUME_MOUNTS+=(--volume /etc/rhsm/ca/redhat-uep.pem:/etc/rhsm/ca/redhat-uep.pem:Z)\n  fi\n\nelif [ \"${HERMETIC}\" != \"true\" ] && find /entitlement -name \"*.pem\" >> null; then\n  cp -r --preserve=mode \"$ENTITLEMENT_PATH\" /tmp/entitlement\n  VOLUME_MOUNTS+=(--volume /tmp/entitlement:/etc/pki/entitlement)\n  echo \"Adding the entitlement to the build\"\nfi\n\nif [ -n \"${ADDITIONAL_VOLUME_MOUNTS-}\" ]; then\n  # ADDITIONAL_VOLUME_MOUNTS allows to specify more volumes for the build.\n  # Instrumented builds (SAST) use this step as their base and add some other tools.\n  while read -r volume_mount; do\n    VOLUME_MOUNTS+=(\"--volume=$volume_mount\")\n  done <<< \"$ADDITIONAL_VOLUME_MOUNTS\"\nfi\n\nADDITIONAL_SECRET_PATH=\"/additional-secret\"\nADDITIONAL_SECRET_TMP=\"/tmp/additional-secret\"\nif [ -d \"$ADDITIONAL_SECRET_PATH\" ]; then\n  cp -r --preserve=mode -L \"$ADDITIONAL_SECRET_PATH\" $ADDITIONAL_SECRET_TMP\n  while read -r filename; do\n    echo \"Adding the secret ${ADDITIONAL_SECRET}/${filename} to the build, available at /run/secrets/${ADDITIONAL_SECRET}/${filename}\"\n    BUILDAH_ARGS+=(\"--secret=id=${ADDITIONAL_SECRET}/${filename},src=$ADDITIONAL_SECRET_TMP/${filename}\")\n  done < <(find $ADDITIONAL_SECRET_TMP -maxdepth 1 -type f -exec basename {} \\;)\nfi\n\n# Prevent ShellCheck from giving a warning because 'image' is defined and 'IMAGE' is not.\ndeclare IMAGE\n\nbuildah_cmd_array=(\n    buildah build\n    \"${VOLUME_MOUNTS[@]}\"\n    \"${BUILDAH_ARGS[@]}\"\n    \"${LABELS[@]}\"\n    --tls-verify=\"$TLSVERIFY\" --no-cache\n    --ulimit nofile=4096:4096\n    -f \"$dockerfile_copy\" -t \"$IMAGE\" .\n)\nbuildah_cmd=$(printf \"%q \" \"${buildah_cmd_array[@]}\")\n\nif [ \"${HERMETIC}\" == \"true\" ]; then\n  # enabling loopback adapter enables Bazel builds to work in hermetic mode.\n  command=\"ip link set lo up && $buildah_cmd\"\nelse\n  command=\"$buildah_cmd\"\nfi\n\n# disable host subcription manager integration\nfind /usr/share/rhel/secrets -type l -exec unlink {} \\;\n\nunshare -Uf \"${UNSHARE_ARGS[@]}\" --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w \"${SOURCE_CODE_DIR}/$CONTEXT\" -- sh -c \"$command\"\n\ncontainer=$(buildah from --pull-never \"$IMAGE\")\n\n# Save the SBOM produced by Cachi2 so it can be merged into the final SBOM later\nif [ -f \"/tmp/cachi2/output/bom.json\" ]; then\n  echo \"Making copy of sbom-cachi2.json\"\n  cp /tmp/cachi2/output/bom.json ./sbom-cachi2.json\nfi\n\nbuildah mount $container | tee /shared/container_path\n# delete symlinks - they may point outside the container rootfs, messing with SBOM scanners\nfind $(cat /shared/container_path) -xtype l -delete\necho $container > /shared/container_name\n\ntouch /shared/base_images_digests\necho \"Recording base image digests used\"\nfor image in $BASE_IMAGES; do\n  base_image_digest=$(buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' --filter reference=\"$image\")\n  # In some cases, there might be BASE_IMAGES, but not any associated digest. This happens\n  # if buildah did not use that particular image during build because it was skipped\n  if [ -n \"$base_image_digest\" ]; then\n    echo \"$image $base_image_digest\" | tee -a /shared/base_images_digests\n  fi\ndone\n",
                    "environment": {
                      "container": "build",
                      "image": "oci://quay.io/konflux-ci/buildah-task@sha256:3d8f5fe17878a5325bf276e89ecfc17ed6d22a18b49a6255ffdf498ce94d9802"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -euo pipefail\n/scripts/inject-icm.sh \"$IMAGE\"\n",
                    "environment": {
                      "container": "icm",
                      "image": "oci://quay.io/konflux-ci/icm-injection-scripts@sha256:523689a26c74790be67d6036820abfb9aa10bec6efff98cc1c9b74bd2f99eeb1"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -e\n\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\nretries=5\n# Push to a unique tag based on the TaskRun name to avoid race conditions\necho \"Pushing to ${IMAGE%:*}:${TASKRUN_NAME}\"\nif ! buildah push \\\n  --retry \"$retries\" \\\n  --tls-verify=\"$TLSVERIFY\" \\\n  \"$IMAGE\" \\\n  \"docker://${IMAGE%:*}:golden-container-on-push-ql68v-build-container-amd64\";\nthen\n  echo \"Failed to push sbom image to ${IMAGE%:*}:golden-container-on-push-ql68v-build-container-amd64 after ${retries} tries\"\n  exit 1\nfi\n\n# Push to a tag based on the git revision\necho \"Pushing to ${IMAGE}\"\nif ! buildah push \\\n  --retry \"$retries\" \\\n  --tls-verify=\"$TLSVERIFY\" \\\n  --digestfile \"/workspace/source/image-digest\" \"$IMAGE\" \\\n  \"docker://$IMAGE\";\nthen\n  echo \"Failed to push sbom image to $IMAGE after ${retries} tries\"\n  exit 1\nfi\n\ncat \"/workspace/source\"/image-digest | tee /tekton/results/IMAGE_DIGEST\necho -n \"$IMAGE\" | tee /tekton/results/IMAGE_URL\n{\n  echo -n \"${IMAGE}@\"\n  cat \"/workspace/source/image-digest\"\n} > \"/tekton/results/IMAGE_REF\"\n",
                    "environment": {
                      "container": "push",
                      "image": "oci://quay.io/konflux-ci/buildah-task@sha256:3d8f5fe17878a5325bf276e89ecfc17ed6d22a18b49a6255ffdf498ce94d9802"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "if [ \"${SKIP_SBOM_GENERATION}\" = \"true\" ]; then\n  echo \"Skipping SBOM generation\"\n  exit 0\nfi\necho \"Running syft on the source directory\"\nsyft dir:\"/workspace/source/$SOURCE_CODE_DIR/$CONTEXT\" --output cyclonedx-json@1.5=\"/workspace/source/sbom-source.json\"\necho \"Running syft on the image filesystem\"\nsyft dir:\"$(cat /shared/container_path)\" --output cyclonedx-json@1.5=\"/workspace/source/sbom-image.json\"\n",
                    "environment": {
                      "container": "sbom-syft-generate",
                      "image": "oci://registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9@sha256:070ecb89de5104bb64fbf399a991a975e7d4d7e0cea0f7beb1e591b5591991c8"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "if [ -f /var/lib/containers/java ]; then\n  /opt/jboss/container/java/run/run-java.sh analyse-dependencies path $(cat /shared/container_path) -s /workspace/source/sbom-image.json --task-run-name golden-container-on-push-ql68v-build-container-amd64 --publishers /tekton/results/SBOM_JAVA_COMPONENTS_COUNT\n  sed -i 's/^/ /' /tekton/results/SBOM_JAVA_COMPONENTS_COUNT # Workaround for SRVKP-2875\nelse\n  touch /tekton/results/JAVA_COMMUNITY_DEPENDENCIES\nfi\n",
                    "environment": {
                      "container": "analyse-dependencies-java-sbom",
                      "image": "oci://quay.io/redhat-appstudio/hacbs-jvm-build-request-processor@sha256:530d1932dc47d05da42a3a329a05eb30fe7105aa9e0d3f0d682dfa015e33b4ac"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -euo pipefail\n\nif [ \"${SKIP_SBOM_GENERATION}\" = \"true\" ]; then\n  echo \"Skipping SBOM generation\"\n  exit 0\nfi\n\nsboms_to_merge=(syft:sbom-source.json syft:sbom-image.json)\n\nif [ -f \"sbom-cachi2.json\" ]; then\n  sboms_to_merge+=(cachi2:sbom-cachi2.json)\nfi\n\necho \"Merging sboms: (${sboms_to_merge[*]}) => sbom-cyclonedx.json\"\npython3 /scripts/merge_sboms.py \"${sboms_to_merge[@]}\" > sbom-cyclonedx.json\n\necho \"Adding base images data to sbom-cyclonedx.json\"\npython3 /scripts/base_images_sbom_script.py \\\n  --sbom=sbom-cyclonedx.json \\\n  --parsed-dockerfile=/shared/parsed_dockerfile.json \\\n  --base-images-digests=/shared/base_images_digests\n\necho \"Adding image reference to sbom\"\nIMAGE_URL=\"$(cat \"/tekton/results/IMAGE_URL\")\"\nIMAGE_DIGEST=\"$(cat \"/tekton/results/IMAGE_DIGEST\")\"\n\npython3 /scripts/add_image_reference.py \\\n  --image-url \"$IMAGE_URL\" \\\n  --image-digest \"$IMAGE_DIGEST\" \\\n  --input-file sbom-cyclonedx.json \\\n  --output-file /tmp/sbom-cyclonedx.tmp.json\n\nmv /tmp/sbom-cyclonedx.tmp.json sbom-cyclonedx.json\n",
                    "environment": {
                      "container": "prepare-sboms",
                      "image": "oci://quay.io/konflux-ci/sbom-utility-scripts@sha256:2d6db18c66a63502090d8555f737b91ce497d6598af2976cf792a90c3c6856a9"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nif [ \"${SKIP_SBOM_GENERATION}\" = \"true\" ]; then\n  echo \"Skipping SBOM generation\"\n  exit 0\nfi\n\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\ncosign attach sbom --sbom sbom-cyclonedx.json --type cyclonedx \"$(cat \"/tekton/results/IMAGE_REF\")\"\n\n# Remove tag from IMAGE while allowing registry to contain a port number.\nsbom_repo=\"${IMAGE%:*}\"\nsbom_digest=\"$(sha256sum sbom-cyclonedx.json | cut -d' ' -f1)\"\n# The SBOM_BLOB_URL is created by `cosign attach sbom`.\necho -n \"${sbom_repo}@sha256:${sbom_digest}\" | tee \"/tekton/results/SBOM_BLOB_URL\"\n",
                    "environment": {
                      "container": "upload-sbom",
                      "image": "oci://quay.io/konflux-ci/appstudio-utils@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
                    }
                  }
                ]
              },
              {
                "after": [
                  "clone-repository",
                  "init"
                ],
                "finishedOn": "2025-02-10T01:10:39Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/cloud-address": "10.207.4.186",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "image-build, konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-3fca8188ae390186-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "build.appstudio.redhat.com/build_type": "docker",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "build-container-arm64",
                      "tekton.dev/task": "buildah-remote"
                    }
                  },
                  "parameters": {
                    "ACTIVATION_KEY": "activation-key",
                    "ADDITIONAL_SECRET": "does-not-exist",
                    "ADD_CAPABILITIES": "",
                    "BUILD_ARGS": [],
                    "BUILD_ARGS_FILE": "",
                    "COMMIT_SHA": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "CONTEXT": ".",
                    "DOCKERFILE": "Containerfile",
                    "ENTITLEMENT_SECRET": "etc-pki-entitlement",
                    "HERMETIC": "true",
                    "IMAGE": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-arm64",
                    "IMAGE_APPEND_PLATFORM": "false",
                    "IMAGE_EXPIRES_AFTER": "",
                    "LABELS": [],
                    "PLATFORM": "linux/arm64",
                    "PREFETCH_INPUT": "",
                    "PRIVILEGED_NESTED": "false",
                    "SBOM_TYPE": "spdx",
                    "SKIP_SBOM_GENERATION": "false",
                    "SKIP_UNUSED_STAGES": "true",
                    "SQUASH": "false",
                    "STORAGE_DRIVER": "vfs",
                    "TARGET_STAGE": "",
                    "TLSVERIFY": "true",
                    "YUM_REPOS_D_FETCHED": "fetched.repos.d",
                    "YUM_REPOS_D_SRC": "repos.d",
                    "YUM_REPOS_D_TARGET": "/etc/yum.repos.d",
                    "caTrustConfigMapKey": "ca-bundle.crt",
                    "caTrustConfigMapName": "trusted-ca"
                  }
                },
                "name": "build-container-arm64",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "buildah-remote"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-buildah-remote:0.4@sha256:9b2036f766483d6ad3ae294975537598b7555473efa5248b7d6712c3c55fe6b8"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGE_DIGEST",
                    "type": "string",
                    "value": "sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32"
                  },
                  {
                    "name": "IMAGE_REF",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-arm64@sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32"
                  },
                  {
                    "name": "IMAGE_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-arm64"
                  },
                  {
                    "name": "SBOM_BLOB_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:ca360a60ea07abb15c867fa77231a20e6d2ef2d60c3deb044e1b4dbb706590f8"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:05:39Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": [
                      "--build-args",
                      "--labels"
                    ],
                    "entryPoint": "#!/bin/bash\nset -e\nset -o verbose\nmkdir -p ~/.ssh\nif [ -e \"/ssh/error\" ]; then\n  #no server could be provisioned\n  cat /ssh/error\n  exit 1\nfi\nexport SSH_HOST=$(cat /ssh/host)\n\nif [ \"$SSH_HOST\" == \"localhost\" ] ; then\n  IS_LOCALHOST=true\n  echo \"Localhost detected; running build in cluster\"\nelif [ -e \"/ssh/otp\" ]; then\n  curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa\n  echo \"\" >> ~/.ssh/id_rsa\nelse\n  cp /ssh/id_rsa ~/.ssh\nfi\n\nmkdir -p scripts\n\nif ! [[ $IS_LOCALHOST ]]; then\n  chmod 0400 ~/.ssh/id_rsa\n  export BUILD_DIR=$(cat /ssh/user-dir)\n  export SSH_ARGS=\"-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10\"\n  echo \"$BUILD_DIR\"\n  # shellcheck disable=SC2086\n  ssh $SSH_ARGS \"$SSH_HOST\"  mkdir -p \"$BUILD_DIR/workspaces\" \"$BUILD_DIR/scripts\" \"$BUILD_DIR/volumes\"\n\n  PORT_FORWARD=\"\"\n  PODMAN_PORT_FORWARD=\"\"\n  if [ -n \"$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR\" ] ; then\n    PORT_FORWARD=\" -L 80:$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR:80\"\n    PODMAN_PORT_FORWARD=\" -e JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR=localhost\"\n  fi\n\n  rsync -ra /workspace/source/ \"$SSH_HOST:$BUILD_DIR/workspaces/source/\"\n  rsync -ra /shared/ \"$SSH_HOST:$BUILD_DIR/volumes/shared/\"\n  rsync -ra /entitlement/ \"$SSH_HOST:$BUILD_DIR/volumes/etc-pki-entitlement/\"\n  rsync -ra /activation-key/ \"$SSH_HOST:$BUILD_DIR/volumes/activation-key/\"\n  rsync -ra /additional-secret/ \"$SSH_HOST:$BUILD_DIR/volumes/additional-secret/\"\n  rsync -ra /mnt/trusted-ca/ \"$SSH_HOST:$BUILD_DIR/volumes/trusted-ca/\"\n  rsync -ra \"$HOME/.docker/\" \"$SSH_HOST:$BUILD_DIR/.docker/\"\n  rsync -ra \"/tekton/results/\" \"$SSH_HOST:$BUILD_DIR/results/\"\nfi\nif [ \"${IMAGE_APPEND_PLATFORM}\" == \"true\" ]; then\n  IMAGE=\"${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}\"\n  export IMAGE\nfi\n\ncat >scripts/script-build.sh <<'REMOTESSHEOF'\n#!/bin/bash\nset -euo pipefail\ncd /workspace/source\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\nif [ -e \"$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE\" ]; then\n  dockerfile_path=\"$(pwd)/$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE\"\nelif [ -e \"$SOURCE_CODE_DIR/$DOCKERFILE\" ]; then\n  dockerfile_path=\"$(pwd)/$SOURCE_CODE_DIR/$DOCKERFILE\"\nelif [ -e \"$DOCKERFILE\" ]; then\n  # Instrumented builds (SAST) use this custom dockerffile step as their base\n  dockerfile_path=\"$DOCKERFILE\"\nelif echo \"$DOCKERFILE\" | grep -q \"^https\\?://\"; then\n  echo \"Fetch Dockerfile from $DOCKERFILE\"\n  dockerfile_path=$(mktemp --suffix=-Dockerfile)\n  http_code=$(curl -s -S -L -w \"%{http_code}\" --output \"$dockerfile_path\" \"$DOCKERFILE\")\n  if [ \"$http_code\" != 200 ]; then\n    echo \"No Dockerfile is fetched. Server responds $http_code\"\n    exit 1\n  fi\n  http_code=$(curl -s -S -L -w \"%{http_code}\" --output \"$dockerfile_path.dockerignore.tmp\" \"$DOCKERFILE.dockerignore\")\n  if [ \"$http_code\" = 200 ]; then\n    echo \"Fetched .dockerignore from $DOCKERFILE.dockerignore\"\n    mv \"$dockerfile_path.dockerignore.tmp\" \"$SOURCE_CODE_DIR/$CONTEXT/.dockerignore\"\n  fi\nelse\n  echo \"Cannot find Dockerfile $DOCKERFILE\"\n  exit 1\nfi\n\ndockerfile_copy=$(mktemp --tmpdir \"$(basename \"$dockerfile_path\").XXXXXX\")\ncp \"$dockerfile_path\" \"$dockerfile_copy\"\n\n# Fixing group permission on /var/lib/containers\nchown root:root /var/lib/containers\n\nsed -i 's/^\\s*short-name-mode\\s*=\\s*.*/short-name-mode = \"disabled\"/' /etc/containers/registries.conf\n\n# Setting new namespace to run buildah - 2^32-2\necho 'root:1:4294967294' | tee -a /etc/subuid >> /etc/subgid\n\nbuild_args=()\nif [ -n \"${BUILD_ARGS_FILE}\" ]; then\n  # Parse BUILD_ARGS_FILE ourselves because dockerfile-json doesn't support it\n  echo \"Parsing ARGs from $BUILD_ARGS_FILE\"\n  mapfile -t build_args < <(\n    # https://www.mankier.com/1/buildah-build#--build-arg-file\n    # delete lines that start with #\n    # delete blank lines\n    sed -e '/^#/d' -e '/^\\s*$/d' \"${SOURCE_CODE_DIR}/${BUILD_ARGS_FILE}\"\n  )\nfi\n\nLABELS=()\n# Split `args` into two sets of arguments.\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --build-args)\n            shift\n            # Note: this may result in multiple --build-arg=KEY=value flags with the same KEY being\n            # passed to buildah. In that case, the *last* occurrence takes precedence. This is why\n            # we append BUILD_ARGS after the content of the BUILD_ARGS_FILE\n            while [[ $# -gt 0 && $1 != --* ]]; do build_args+=(\"$1\"); shift; done\n            ;;\n        --labels)\n            shift\n            while [[ $# -gt 0 && $1 != --* ]]; do LABELS+=(\"--label\" \"$1\"); shift; done\n            ;;\n        *)\n            echo \"unexpected argument: $1\" >&2\n            exit 2\n            ;;\n    esac\ndone\n\nBUILD_ARG_FLAGS=()\nfor build_arg in \"${build_args[@]}\"; do\n  BUILD_ARG_FLAGS+=(\"--build-arg=$build_arg\")\ndone\n\ndockerfile-json \"${BUILD_ARG_FLAGS[@]}\" \"$dockerfile_copy\" > /shared/parsed_dockerfile.json\nBASE_IMAGES=$(\n    jq -r '.Stages[] | select(.From | .Stage or .Scratch | not) | .BaseName | select(test(\"^oci-archive:\") | not)' /shared/parsed_dockerfile.json |\n      tr -d '\"' |\n      tr -d \"'\"\n)\n\nBUILDAH_ARGS=()\nUNSHARE_ARGS=()\n\nif [ \"${HERMETIC}\" == \"true\" ]; then\n  BUILDAH_ARGS+=(\"--pull=never\")\n  UNSHARE_ARGS+=(\"--net\")\n\n  for image in $BASE_IMAGES; do\n    unshare -Ufp --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -- buildah pull \"$image\"\n  done\n  echo \"Build will be executed with network isolation\"\nfi\n\nif [ -n \"${TARGET_STAGE}\" ]; then\n  BUILDAH_ARGS+=(\"--target=${TARGET_STAGE}\")\nfi\n\nBUILDAH_ARGS+=(\"${BUILD_ARG_FLAGS[@]}\")\n\nif [ \"${PRIVILEGED_NESTED}\" == \"true\" ]; then\n  BUILDAH_ARGS+=(\"--security-opt=label=disable\")\n  BUILDAH_ARGS+=(\"--cap-add=all\")\n  BUILDAH_ARGS+=(\"--device=/dev/fuse\")\nfi\n\nif [ -n \"${ADD_CAPABILITIES}\" ]; then\n  BUILDAH_ARGS+=(\"--cap-add=${ADD_CAPABILITIES}\")\nfi\n\nif [ \"${SQUASH}\" == \"true\" ]; then\n  BUILDAH_ARGS+=(\"--squash\")\nfi\n\nif [ \"${SKIP_UNUSED_STAGES}\" != \"true\" ] ; then\n  BUILDAH_ARGS+=(\"--skip-unused-stages=false\")\nfi\n\nVOLUME_MOUNTS=()\n\nif [ -f \"/workspace/source/cachi2/cachi2.env\" ]; then\n  cp -r \"/workspace/source/cachi2\" /tmp/\n  chmod -R go+rwX /tmp/cachi2\n  VOLUME_MOUNTS+=(--volume /tmp/cachi2:/cachi2)\n  # Read in the whole file (https://unix.stackexchange.com/questions/533277), then\n  # for each RUN ... line insert the cachi2.env command *after* any options like --mount\n  sed -E -i \\\n      -e 'H;1h;$!d;x' \\\n      -e 's@^\\s*(run((\\s|\\\\\\n)+-\\S+)*(\\s|\\\\\\n)+)@\\1. /cachi2/cachi2.env \\&\\& \\\\\\n    @igM' \\\n      \"$dockerfile_copy\"\n  echo \"Prefetched content will be made available\"\n\n  prefetched_repo_for_my_arch=\"/tmp/cachi2/output/deps/rpm/$(uname -m)/repos.d/cachi2.repo\"\n  if [ -f \"$prefetched_repo_for_my_arch\" ]; then\n    echo \"Adding $prefetched_repo_for_my_arch to $YUM_REPOS_D_FETCHED\"\n    mkdir -p \"$YUM_REPOS_D_FETCHED\"\n    cp --no-clobber \"$prefetched_repo_for_my_arch\" \"$YUM_REPOS_D_FETCHED\"\n  fi\nfi\n\n# if yum repofiles stored in git, copy them to mount point outside the source dir\nif [ -d \"${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}\" ]; then\n  mkdir -p \"${YUM_REPOS_D_FETCHED}\"\n  cp -r \"${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}\"/* \"${YUM_REPOS_D_FETCHED}\"\nfi\n\n# if anything in the repofiles mount point (either fetched or from git), mount it\nif [ -d \"${YUM_REPOS_D_FETCHED}\" ]; then\n  chmod -R go+rwX \"${YUM_REPOS_D_FETCHED}\"\n  mount_point=$(realpath \"${YUM_REPOS_D_FETCHED}\")\n  VOLUME_MOUNTS+=(--volume \"${mount_point}:${YUM_REPOS_D_TARGET}\")\nfi\n\nDEFAULT_LABELS=(\n  \"--label\" \"build-date=$(date -u +'%Y-%m-%dT%H:%M:%S')\"\n  \"--label\" \"architecture=$(uname -m)\"\n  \"--label\" \"vcs-type=git\"\n)\n[ -n \"$COMMIT_SHA\" ] && DEFAULT_LABELS+=(\"--label\" \"vcs-ref=$COMMIT_SHA\")\n[ -n \"$IMAGE_EXPIRES_AFTER\" ] && DEFAULT_LABELS+=(\"--label\" \"quay.expires-after=$IMAGE_EXPIRES_AFTER\")\n\n# Concatenate defaults and explicit labels. If a label appears twice, the last one wins.\nLABELS=(\"${DEFAULT_LABELS[@]}\" \"${LABELS[@]}\")\n\nACTIVATION_KEY_PATH=\"/activation-key\"\nENTITLEMENT_PATH=\"/entitlement\"\n\n# 0. if hermetic=true, skip all subscription related stuff\n# 1. do not enable activation key and entitlement at same time. If both vars are provided, prefer activation key.\n# 2. Activation-keys will be used when the key 'org' exists in the activation key secret.\n# 3. try to pre-register and mount files to the correct location so that users do no need to modify Dockerfiles.\n# 3. If the Dockerfile contains the string \"subcription-manager register\", add the activation-keys volume\n#    to buildah but don't pre-register for backwards compatibility. Mount an empty directory on\n#    shared emptydir volume to \"/etc/pki/entitlement\" to prevent certificates from being included\n\nif [ \"${HERMETIC}\" != \"true\" ] && [ -e /activation-key/org ]; then\n  cp -r --preserve=mode \"$ACTIVATION_KEY_PATH\" /tmp/activation-key\n  mkdir -p /shared/rhsm/etc/pki/entitlement\n  mkdir -p /shared/rhsm/etc/pki/consumer\n\n  VOLUME_MOUNTS+=(-v /tmp/activation-key:/activation-key \\\n                  -v /shared/rhsm/etc/pki/entitlement:/etc/pki/entitlement:Z \\\n                  -v /shared/rhsm/etc/pki/consumer:/etc/pki/consumer:Z)\n  echo \"Adding activation key to the build\"\n\n  if ! grep -E \"^[^#]*subscription-manager.[^#]*register\" \"$dockerfile_path\"; then\n    # user is not running registration in the Containerfile: pre-register.\n    echo \"Pre-registering with subscription manager.\"\n    subscription-manager register --org \"$(cat /tmp/activation-key/org)\" --activationkey \"$(cat /tmp/activation-key/activationkey)\"\n    trap 'subscription-manager unregister || true' EXIT\n\n    # copy generated certificates to /shared volume\n    cp /etc/pki/entitlement/*.pem /shared/rhsm/etc/pki/entitlement\n    cp /etc/pki/consumer/*.pem /shared/rhsm/etc/pki/consumer\n\n    # and then mount get /etc/rhsm/ca/redhat-uep.pem into /run/secrets/rhsm/ca\n    VOLUME_MOUNTS+=(--volume /etc/rhsm/ca/redhat-uep.pem:/etc/rhsm/ca/redhat-uep.pem:Z)\n  fi\n\nelif [ \"${HERMETIC}\" != \"true\" ] && find /entitlement -name \"*.pem\" >> null; then\n  cp -r --preserve=mode \"$ENTITLEMENT_PATH\" /tmp/entitlement\n  VOLUME_MOUNTS+=(--volume /tmp/entitlement:/etc/pki/entitlement)\n  echo \"Adding the entitlement to the build\"\nfi\n\nif [ -n \"${ADDITIONAL_VOLUME_MOUNTS-}\" ]; then\n  # ADDITIONAL_VOLUME_MOUNTS allows to specify more volumes for the build.\n  # Instrumented builds (SAST) use this step as their base and add some other tools.\n  while read -r volume_mount; do\n    VOLUME_MOUNTS+=(\"--volume=$volume_mount\")\n  done <<< \"$ADDITIONAL_VOLUME_MOUNTS\"\nfi\n\nADDITIONAL_SECRET_PATH=\"/additional-secret\"\nADDITIONAL_SECRET_TMP=\"/tmp/additional-secret\"\nif [ -d \"$ADDITIONAL_SECRET_PATH\" ]; then\n  cp -r --preserve=mode -L \"$ADDITIONAL_SECRET_PATH\" $ADDITIONAL_SECRET_TMP\n  while read -r filename; do\n    echo \"Adding the secret ${ADDITIONAL_SECRET}/${filename} to the build, available at /run/secrets/${ADDITIONAL_SECRET}/${filename}\"\n    BUILDAH_ARGS+=(\"--secret=id=${ADDITIONAL_SECRET}/${filename},src=$ADDITIONAL_SECRET_TMP/${filename}\")\n  done < <(find $ADDITIONAL_SECRET_TMP -maxdepth 1 -type f -exec basename {} \\;)\nfi\n\n# Prevent ShellCheck from giving a warning because 'image' is defined and 'IMAGE' is not.\ndeclare IMAGE\n\nbuildah_cmd_array=(\n    buildah build\n    \"${VOLUME_MOUNTS[@]}\"\n    \"${BUILDAH_ARGS[@]}\"\n    \"${LABELS[@]}\"\n    --tls-verify=\"$TLSVERIFY\" --no-cache\n    --ulimit nofile=4096:4096\n    -f \"$dockerfile_copy\" -t \"$IMAGE\" .\n)\nbuildah_cmd=$(printf \"%q \" \"${buildah_cmd_array[@]}\")\n\nif [ \"${HERMETIC}\" == \"true\" ]; then\n  # enabling loopback adapter enables Bazel builds to work in hermetic mode.\n  command=\"ip link set lo up && $buildah_cmd\"\nelse\n  command=\"$buildah_cmd\"\nfi\n\n# disable host subcription manager integration\nfind /usr/share/rhel/secrets -type l -exec unlink {} \\;\n\nunshare -Uf \"${UNSHARE_ARGS[@]}\" --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w \"${SOURCE_CODE_DIR}/$CONTEXT\" -- sh -c \"$command\"\n\ncontainer=$(buildah from --pull-never \"$IMAGE\")\n\n# Save the SBOM produced by Cachi2 so it can be merged into the final SBOM later\nif [ -f \"/tmp/cachi2/output/bom.json\" ]; then\n  echo \"Making copy of sbom-cachi2.json\"\n  cp /tmp/cachi2/output/bom.json ./sbom-cachi2.json\nfi\n\nbuildah mount \"$container\" | tee /shared/container_path\n# delete symlinks - they may point outside the container rootfs, messing with SBOM scanners\nfind $(cat /shared/container_path) -xtype l -delete\necho $container > /shared/container_name\n\ntouch /shared/base_images_digests\necho \"Recording base image digests used\"\nfor image in $BASE_IMAGES; do\n  base_image_digest=$(buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' --filter reference=\"$image\")\n  # In some cases, there might be BASE_IMAGES, but not any associated digest. This happens\n  # if buildah did not use that particular image during build because it was skipped\n  if [ -n \"$base_image_digest\" ]; then\n    echo \"$image $base_image_digest\" | tee -a /shared/base_images_digests\n  fi\ndone\n\nbuildah push \"$IMAGE\" \"oci:konflux-final-image:$IMAGE\"\nREMOTESSHEOF\nchmod +x scripts/script-build.sh\n\nif ! [[ $IS_LOCALHOST ]]; then\n  PRIVILEGED_NESTED_FLAGS=()\n  if [[ \"${PRIVILEGED_NESTED}\" == \"true\" ]]; then\n    # This is a workaround for building bootc images because the cache filesystem (/var/tmp/ on the host) must be a real filesystem that supports setting SELinux security attributes.\n    # https://github.com/coreos/rpm-ostree/discussions/4648\n    # shellcheck disable=SC2086\n    ssh $SSH_ARGS \"$SSH_HOST\"  mkdir -p \"$BUILD_DIR/var/tmp\"\n    PRIVILEGED_NESTED_FLAGS=(--privileged --mount \"type=bind,source=$BUILD_DIR/var/tmp,target=/var/tmp,relabel=shared\")\n  fi\n  rsync -ra scripts \"$SSH_HOST:$BUILD_DIR\"\n  # shellcheck disable=SC2086\n  ssh $SSH_ARGS \"$SSH_HOST\" $PORT_FORWARD podman  run $PODMAN_PORT_FORWARD \\\n    --tmpfs /run/secrets \\\n    -e BUILDAH_FORMAT=\"$BUILDAH_FORMAT\" \\\n    -e STORAGE_DRIVER=\"$STORAGE_DRIVER\" \\\n    -e HERMETIC=\"$HERMETIC\" \\\n    -e SOURCE_CODE_DIR=\"$SOURCE_CODE_DIR\" \\\n    -e CONTEXT=\"$CONTEXT\" \\\n    -e IMAGE=\"$IMAGE\" \\\n    -e TLSVERIFY=\"$TLSVERIFY\" \\\n    -e IMAGE_EXPIRES_AFTER=\"$IMAGE_EXPIRES_AFTER\" \\\n    -e YUM_REPOS_D_SRC=\"$YUM_REPOS_D_SRC\" \\\n    -e YUM_REPOS_D_FETCHED=\"$YUM_REPOS_D_FETCHED\" \\\n    -e YUM_REPOS_D_TARGET=\"$YUM_REPOS_D_TARGET\" \\\n    -e TARGET_STAGE=\"$TARGET_STAGE\" \\\n    -e ENTITLEMENT_SECRET=\"$ENTITLEMENT_SECRET\" \\\n    -e ACTIVATION_KEY=\"$ACTIVATION_KEY\" \\\n    -e ADDITIONAL_SECRET=\"$ADDITIONAL_SECRET\" \\\n    -e BUILD_ARGS_FILE=\"$BUILD_ARGS_FILE\" \\\n    -e ADD_CAPABILITIES=\"$ADD_CAPABILITIES\" \\\n    -e SQUASH=\"$SQUASH\" \\\n    -e SKIP_UNUSED_STAGES=\"$SKIP_UNUSED_STAGES\" \\\n    -e PRIVILEGED_NESTED=\"$PRIVILEGED_NESTED\" \\\n    -e SKIP_SBOM_GENERATION=\"$SKIP_SBOM_GENERATION\" \\\n    -e SBOM_TYPE=\"$SBOM_TYPE\" \\\n    -e COMMIT_SHA=\"$COMMIT_SHA\" \\\n    -e DOCKERFILE=\"$DOCKERFILE\" \\\n    -v \"$BUILD_DIR/workspaces/source:/workspace/source:Z\" \\\n    -v \"$BUILD_DIR/volumes/shared:/shared:Z\" \\\n    -v \"$BUILD_DIR/volumes/etc-pki-entitlement:/entitlement:Z\" \\\n    -v \"$BUILD_DIR/volumes/activation-key:/activation-key:Z\" \\\n    -v \"$BUILD_DIR/volumes/additional-secret:/additional-secret:Z\" \\\n    -v \"$BUILD_DIR/volumes/trusted-ca:/mnt/trusted-ca:Z\" \\\n    -v \"$BUILD_DIR/.docker/:/root/.docker:Z\" \\\n    -v \"$BUILD_DIR/results/:/tekton/results:Z\" \\\n    -v \"$BUILD_DIR/scripts:/scripts:Z\" \\\n    \"${PRIVILEGED_NESTED_FLAGS[@]}\" \\\n    --user=0  --rm  \"$BUILDER_IMAGE\" /scripts/script-build.sh \"$@\"\n  rsync -ra \"$SSH_HOST:$BUILD_DIR/workspaces/source/\" \"/workspace/source/\"\n  rsync -ra \"$SSH_HOST:$BUILD_DIR/volumes/shared/\" /shared/\n  rsync -ra \"$SSH_HOST:$BUILD_DIR/results/\" \"/tekton/results/\"\n  buildah pull \"oci:konflux-final-image:$IMAGE\"\nelse\n  bash scripts/script-build.sh \"$@\"\nfi\necho \"Build on remote host $SSH_HOST finished\"\n\nbuildah images\ncontainer=$(buildah from --pull-never \"$IMAGE\")\nbuildah mount \"$container\" | tee /shared/container_path\n# delete symlinks - they may point outside the container rootfs, messing with SBOM scanners\nfind $(cat /shared/container_path) -xtype l -delete\necho $container > /shared/container_name",
                    "environment": {
                      "container": "build",
                      "image": "oci://quay.io/konflux-ci/buildah-task@sha256:3d8f5fe17878a5325bf276e89ecfc17ed6d22a18b49a6255ffdf498ce94d9802"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -euo pipefail\nif [ \"${IMAGE_APPEND_PLATFORM}\" == \"true\" ]; then\n  IMAGE=\"${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}\"\n  export IMAGE\nfi\n/scripts/inject-icm.sh \"$IMAGE\"\n",
                    "environment": {
                      "container": "icm",
                      "image": "oci://quay.io/konflux-ci/icm-injection-scripts@sha256:523689a26c74790be67d6036820abfb9aa10bec6efff98cc1c9b74bd2f99eeb1"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -e\nif [ \"${IMAGE_APPEND_PLATFORM}\" == \"true\" ]; then\n  IMAGE=\"${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}\"\n  export IMAGE\nfi\n\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\nretries=5\n# Push to a unique tag based on the TaskRun name to avoid race conditions\necho \"Pushing to ${IMAGE%:*}:${TASKRUN_NAME}\"\nif ! buildah push \\\n  --retry \"$retries\" \\\n  --tls-verify=\"$TLSVERIFY\" \\\n  \"$IMAGE\" \\\n  \"docker://${IMAGE%:*}:golden-container-on-push-ql68v-build-container-arm64\";\nthen\n  echo \"Failed to push sbom image to ${IMAGE%:*}:golden-container-on-push-ql68v-build-container-arm64 after ${retries} tries\"\n  exit 1\nfi\n\n# Push to a tag based on the git revision\necho \"Pushing to ${IMAGE}\"\nif ! buildah push \\\n  --retry \"$retries\" \\\n  --tls-verify=\"$TLSVERIFY\" \\\n  --digestfile \"/workspace/source/image-digest\" \"$IMAGE\" \\\n  \"docker://$IMAGE\";\nthen\n  echo \"Failed to push sbom image to $IMAGE after ${retries} tries\"\n  exit 1\nfi\n\ncat \"/workspace/source\"/image-digest | tee /tekton/results/IMAGE_DIGEST\necho -n \"$IMAGE\" | tee /tekton/results/IMAGE_URL\n{\n  echo -n \"${IMAGE}@\"\n  cat \"/workspace/source/image-digest\"\n} > \"/tekton/results/IMAGE_REF\"\n",
                    "environment": {
                      "container": "push",
                      "image": "oci://quay.io/konflux-ci/buildah-task@sha256:3d8f5fe17878a5325bf276e89ecfc17ed6d22a18b49a6255ffdf498ce94d9802"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -e\nif [ \"${IMAGE_APPEND_PLATFORM}\" == \"true\" ]; then\n  IMAGE=\"${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}\"\n  export IMAGE\nfi\nif [ \"${SKIP_SBOM_GENERATION}\" = \"true\" ]; then\n  echo \"Skipping SBOM generation\"\n  exit 0\nfi\n\ncase $SBOM_TYPE in\n  cyclonedx)\n    syft_sbom_type=cyclonedx-json@1.5 ;;\n  spdx)\n    syft_sbom_type=spdx-json@2.3 ;;\n  *)\n    echo \"Invalid SBOM type: $SBOM_TYPE. Valid: cyclonedx, spdx\" >&2\n    exit 1\n    ;;\nesac\n\necho \"Running syft on the source directory\"\nsyft dir:\"/workspace/source/$SOURCE_CODE_DIR/$CONTEXT\" --output \"$syft_sbom_type\"=\"/workspace/source/sbom-source.json\"\necho \"Running syft on the image filesystem\"\nsyft dir:\"$(cat /shared/container_path)\" --output \"$syft_sbom_type\"=\"/workspace/source/sbom-image.json\"\n",
                    "environment": {
                      "container": "sbom-syft-generate",
                      "image": "oci://registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9@sha256:070ecb89de5104bb64fbf399a991a975e7d4d7e0cea0f7beb1e591b5591991c8"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -euo pipefail\nif [ \"${IMAGE_APPEND_PLATFORM}\" == \"true\" ]; then\n  IMAGE=\"${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}\"\n  export IMAGE\nfi\n\nif [ \"${SKIP_SBOM_GENERATION}\" = \"true\" ]; then\n  echo \"Skipping SBOM generation\"\n  exit 0\nfi\n\nsboms_to_merge=(syft:sbom-source.json syft:sbom-image.json)\n\nif [ -f \"sbom-cachi2.json\" ]; then\n  sboms_to_merge+=(cachi2:sbom-cachi2.json)\nfi\n\necho \"Merging sboms: (${sboms_to_merge[*]}) => sbom.json\"\npython3 /scripts/merge_sboms.py \"${sboms_to_merge[@]}\" > sbom.json\n\necho \"Adding image reference to sbom\"\nIMAGE_URL=\"$(cat \"/tekton/results/IMAGE_URL\")\"\nIMAGE_DIGEST=\"$(cat \"/tekton/results/IMAGE_DIGEST\")\"\n\npython3 /scripts/add_image_reference.py \\\n  --image-url \"$IMAGE_URL\" \\\n  --image-digest \"$IMAGE_DIGEST\" \\\n  --input-file sbom.json \\\n  --output-file /tmp/sbom.tmp.json\n\nmv /tmp/sbom.tmp.json sbom.json\n\necho \"Adding base images data to sbom.json\"\npython3 /scripts/base_images_sbom_script.py \\\n  --sbom=sbom.json \\\n  --parsed-dockerfile=/shared/parsed_dockerfile.json \\\n  --base-images-digests=/shared/base_images_digests\n",
                    "environment": {
                      "container": "prepare-sboms",
                      "image": "oci://quay.io/konflux-ci/sbom-utility-scripts@sha256:2d6db18c66a63502090d8555f737b91ce497d6598af2976cf792a90c3c6856a9"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nif [ \"${IMAGE_APPEND_PLATFORM}\" == \"true\" ]; then\n  IMAGE=\"${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}\"\n  export IMAGE\nfi\nif [ \"${SKIP_SBOM_GENERATION}\" = \"true\" ]; then\n  echo \"Skipping SBOM generation\"\n  exit 0\nfi\n\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\ncosign attach sbom --sbom sbom.json --type \"$SBOM_TYPE\" \"$(cat \"/tekton/results/IMAGE_REF\")\"\n\n# Remove tag from IMAGE while allowing registry to contain a port number.\nsbom_repo=\"${IMAGE%:*}\"\nsbom_digest=\"$(sha256sum sbom.json | cut -d' ' -f1)\"\n# The SBOM_BLOB_URL is created by `cosign attach sbom`.\necho -n \"${sbom_repo}@sha256:${sbom_digest}\" | tee \"/tekton/results/SBOM_BLOB_URL\"\n",
                    "environment": {
                      "container": "upload-sbom",
                      "image": "oci://quay.io/konflux-ci/appstudio-utils@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container-amd64",
                  "build-container-arm64",
                  "clone-repository",
                  "init"
                ],
                "finishedOn": "2025-02-10T01:11:32Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "image-build, konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-e5c7e1a6df9479f9-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "build.appstudio.redhat.com/build_type": "docker",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "build-container",
                      "tekton.dev/task": "build-image-manifest"
                    }
                  },
                  "parameters": {
                    "ALWAYS_BUILD_INDEX": "true",
                    "COMMIT_SHA": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "IMAGE": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "IMAGES": [
                      "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-amd64@sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b",
                      "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-arm64@sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32"
                    ],
                    "IMAGE_EXPIRES_AFTER": "",
                    "STORAGE_DRIVER": "vfs",
                    "TLSVERIFY": "true",
                    "HERMETIC": "true"
                  }
                },
                "name": "build-container",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "build-image-manifest"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-build-image-manifest:0.1@sha256:b627d67905aba78b63bbdb347f9af46d20710a4e5e8f2edb289b5ad8f113363c"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGES",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b, quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32"
                  },
                  {
                    "name": "IMAGE_DIGEST",
                    "type": "string",
                    "value": "sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a"
                  },
                  {
                    "name": "IMAGE_REF",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c@sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a"
                  },
                  {
                    "name": "IMAGE_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
                  },
                  {
                    "name": "SBOM_BLOB_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:a586eff1773297a75aa805c935509622831a94925a8d3328a0fc9e2e13a9df2a"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:22Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": [
                      "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-amd64@sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b",
                      "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c-arm64@sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32"
                    ],
                    "entryPoint": "#!/bin/bash\n# Fixing group permission on /var/lib/containers\nset -eu\nset -o pipefail\nchown root:root /var/lib/containers\n\nsed -i 's/^\\s*short-name-mode\\s*=\\s*.*/short-name-mode = \"disabled\"/' /etc/containers/registries.conf\n\nif [[ $# -ne 1 && \"$ALWAYS_BUILD_INDEX\" != \"true\" ]]; then\n  echo \"Skipping image index generation while supplying multiple image inputs is unsupported.\"\n  exit 2\nfi\n\nbuildah manifest create \"$IMAGE\"\nfor i in $@\ndo\n  TOADD=\"$i\"\n  TOADD_URL=\"$(echo \"$i\" | cut -d@ -f1)\"\n  TOADD_DIGEST=\"$(echo \"$i\" | cut -d@ -f2)\"\n  if [[ $(echo \"$i\" | tr -cd \":\" | wc -c) == 2 ]]; then\n    #format is repository:tag@sha256:digest\n    #we need to remove the tag, and just reference the digest\n    #as tag + digest is not supported\n    TOADD_REPOSITORY=\"$(echo \"$i\" | cut -d: -f1)\"\n    TOADD=\"${TOADD_REPOSITORY}@${TOADD_DIGEST}\"\n  fi\n  if [[ \"$ALWAYS_BUILD_INDEX\" != \"true\" ]]; then\n    echo \"Skipping image index generation. Returning results for $TOADD.\"\n    echo -n \"${TOADD_URL}\" > \"/tekton/results/IMAGE_URL\"\n    echo -n \"${TOADD_DIGEST}\" > \"/tekton/results/IMAGE_DIGEST\"\n    echo -n \"${TOADD}\" > \"/tekton/results/IMAGES\"\n    exit 0\n  fi\n  echo \"Adding $TOADD\"\n  buildah manifest add $IMAGE \"docker://$TOADD\" --all\ndone\n\nstatus=-1\nmax_run=5\nsleep_sec=10\nfor run in $(seq 1 $max_run); do\n  status=0\n  [ \"$run\" -gt 1 ] && sleep $sleep_sec\n  echo \"Pushing image to registry\"\n  buildah manifest push \\\n    --tls-verify=$TLSVERIFY \\\n    --digestfile image-digest $IMAGE \\\n    docker://$IMAGE && break || status=$?\ndone\nif [ \"$status\" -ne 0 ]; then\n    echo \"Failed to push image to registry after ${max_run} tries\"\n    exit 1\nfi\n\nINDEX_REPOSITORY=\"$(echo \"$IMAGE\" | cut -d@ -f1 | cut -d: -f1)\"\nMANIFEST_DIGESTS=$(buildah manifest inspect \"$IMAGE\" | jq -er \".manifests[].digest\")\nimage_manifests=\"\"\nfor i in $MANIFEST_DIGESTS\ndo\n  image_manifests=\"${image_manifests} ${INDEX_REPOSITORY}@${i},\"\ndone\n\ncat image-digest | tee /tekton/results/IMAGE_DIGEST\necho -n \"$IMAGE\" | tee \"/tekton/results/IMAGE_URL\"\n{\n  echo -n \"${IMAGE}@\"\n  cat \"image-digest\"\n} > \"/tekton/results/IMAGE_REF\"\necho -n \"${image_manifests:1:-1}\" > \"/tekton/results/IMAGES\"\n\nIMAGE_DIGEST=$(cat image-digest)\n\nINDEX_IMAGE_PULLSPEC=\"${IMAGE}@${IMAGE_DIGEST}\"\nbuildah manifest inspect \"$INDEX_IMAGE_PULLSPEC\" > /index-build-data/manifest_data.json\n",
                    "environment": {
                      "container": "build",
                      "image": "oci://quay.io/konflux-ci/buildah-task@sha256:3d8f5fe17878a5325bf276e89ecfc17ed6d22a18b49a6255ffdf498ce94d9802"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -e\n\nMANIFEST_DATA_FILE=\"/index-build-data/manifest_data.json\"\nif [ ! -f \"$MANIFEST_DATA_FILE\" ]; then\n  echo \"The manifest_data.json file does not exist. Skipping the SBOM creation...\"\n  exit 0\nfi\n\nIMAGE_URL=\"$(cat \"/tekton/results/IMAGE_URL\")\"\nIMAGE_DIGEST=\"$(cat \"/tekton/results/IMAGE_DIGEST\")\"\necho \"Creating SBOM result file...\"\npython3 index_image_sbom_script.py \\\n  --image-index-url \"$IMAGE_URL\" \\\n  --image-index-digest \"$IMAGE_DIGEST\" \\\n  --inspect-input-file \"$MANIFEST_DATA_FILE\" \\\n  --output-path /index-build-data/sbom-results.json\n",
                    "environment": {
                      "container": "create-sbom",
                      "image": "oci://quay.io/konflux-ci/sbom-utility-scripts@sha256:2d6db18c66a63502090d8555f737b91ce497d6598af2976cf792a90c3c6856a9"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -e\n\nSBOM_RESULT_FILE=\"/index-build-data/sbom-results.json\"\nif [ ! -f \"$SBOM_RESULT_FILE\" ]; then\n  echo \"The sbom_results.json file does not exists. Skipping the SBOM upload...\"\n  exit 0\nfi\n\ncosign attach sbom --sbom \"$SBOM_RESULT_FILE\" --type spdx \"$(cat \"/tekton/results/IMAGE_REF\")\"\n\n# Remove tag from IMAGE while allowing registry to contain a port number.\nsbom_repo=\"${IMAGE%:*}\"\nsbom_digest=\"$(sha256sum \"$SBOM_RESULT_FILE\" | cut -d' ' -f1)\"\n# The SBOM_BLOB_URL is created by `cosign attach sbom`.\necho -n \"${sbom_repo}@sha256:${sbom_digest}\" | tee \"/tekton/results/SBOM_BLOB_URL\"\n",
                    "environment": {
                      "container": "upload-sbom",
                      "image": "oci://quay.io/konflux-ci/appstudio-utils@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container",
                  "init"
                ],
                "finishedOn": "2025-02-10T01:12:00Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-d3aef38b8ee4d6af-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "build-source-image",
                      "tekton.dev/task": "source-build"
                    }
                  },
                  "parameters": {
                    "BASE_IMAGES": "",
                    "BINARY_IMAGE": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "HERMETIC": "true"
                  }
                },
                "name": "build-source-image",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "source-build"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-source-build:0.2@sha256:50b50ca7dd65e0132769021f8cfbb2db7c799adea7b4e3a8968b425bbde1e8eb"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "BUILD_RESULT",
                    "type": "string",
                    "value": "{\"status\": \"success\", \"dependencies_included\": false, \"base_image_source_included\": true, \"image_url\": \"quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:sha256-7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a.src\", \"image_digest\": \"sha256:73ae2f8be446b13b690346775d58890e1a576204f33196c84f8ae71e542769c0\"}"
                  },
                  {
                    "name": "IMAGE_REF",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:sha256-7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a.src@sha256:73ae2f8be446b13b690346775d58890e1a576204f33196c84f8ae71e542769c0"
                  },
                  {
                    "name": "SOURCE_IMAGE_DIGEST",
                    "type": "string",
                    "value": "sha256:73ae2f8be446b13b690346775d58890e1a576204f33196c84f8ae71e542769c0"
                  },
                  {
                    "name": "SOURCE_IMAGE_URL",
                    "type": "string",
                    "value": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:sha256-7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a.src"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\n\nif [[ -n \"$BASE_IMAGES\" ]]; then\n    echo \"BASE_IMAGES param received:\"\n    printf \"%s\" \"$BASE_IMAGES\" | tee \"$BASE_IMAGES_FILE\"\n    exit\nfi\n\necho \"BASE_IMAGES param is empty, inspecting the SBOM instead\"\n\nraw_inspect=$(skopeo inspect --raw \"docker://$BINARY_IMAGE\")\nif manifest_digest=$(jq -e -r '.manifests[0].digest' <<< \"$raw_inspect\"); then\n    # The BINARY_IMAGE is an image index, each manifest in the list has its own SBOM.\n    # We're gonna assume the base images are the same or similar enough in all the SBOMs.\n    echo \"BINARY_IMAGE ($BINARY_IMAGE) is a manifest list, picking an arbitrary image from the list\"\n    image_without_digest=${BINARY_IMAGE%@*}\n    image_without_tag=${image_without_digest%:*}\n    image=${image_without_tag}@${manifest_digest}\nelse\n    # The image is a single manifest\n    image=$BINARY_IMAGE\nfi\n\nfor i in {1..5}; do\n    echo \"Downloading SBOM for $image (attempt $i)\"\n    sbom=$(cosign download sbom \"$image\") && break\n    [[ \"$i\" -lt 5 ]] && sleep 1\ndone\n\nif [[ -z \"$sbom\" ]]; then\n    echo \"Failed to download SBOM after 5 attempts. Proceeding anyway.\"\n    echo \"WARNING: the source image will not include sources for the base image.\"\n    exit 0\nfi\n\necho -n \"Looking for base image in SBOM\"\n\n# Note: the SBOM should contain at most one image with the is_base_image property - the\n# base image for the last FROM instruction. That is the only base image we care about.\nif jq -e '.bomFormat == \"CycloneDX\"' <<< \"$sbom\" >/dev/null; then\n    echo \" (.formulation[].components[] with 'konflux:container:is_base_image' property)\"\n    jq -r '\n        .formulation[]?\n        | .components[]?\n        | select(any(.properties[]?; .name == \"konflux:container:is_base_image\"))\n        | (.purl | capture(\"^pkg:oci/.*?@(?<digest>.*?:[a-f0-9]*)\")) as $matched\n        | .name + \"@\" + $matched.digest\n    ' <<< \"$sbom\" | tee \"$BASE_IMAGES_FILE\"\nelse\n    echo ' (a package with a {\"name\": \"konflux:container:is_base_image\"} JSON-encoded annotation)'\n    jq -r '\n        .packages[]\n        | select(any(.annotations[]?.comment; (fromjson?).name? == \"konflux:container:is_base_image\"))\n        | [.externalRefs[]? | select(.referenceType == \"purl\").referenceLocator] as $purls\n        | ($purls | first | capture(\"^pkg:oci/.*?@(?<digest>.*?:[a-f0-9]*)\")) as $matched\n        | .name + \"@\" + $matched.digest\n    ' <<< \"$sbom\" | tee \"$BASE_IMAGES_FILE\"\nfi\n",
                    "environment": {
                      "container": "get-base-images",
                      "image": "oci://quay.io/konflux-ci/appstudio-utils@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\n\napp_dir=/opt/source_build\nregistry_allowlist=\"\nregistry.access.redhat.com\nregistry.redhat.io\n\"\n\n## This is needed for the builds performed by the rpm-ostree task\n## otherwise, we can see this error:\n## \"fatal: detected dubious ownership in repository at '/workspace/workspace/source'\"\n##\ngit config --global --add safe.directory $SOURCE_DIR\n\nbase_images=$(if [[ -f \"$BASE_IMAGES_FILE\" ]]; then cat \"$BASE_IMAGES_FILE\"; fi)\n\n${app_dir}/appenv/bin/python3 ${app_dir}/source_build.py \\\n  --output-binary-image \"$BINARY_IMAGE\" \\\n  --workspace /var/source-build \\\n  --source-dir \"$SOURCE_DIR\" \\\n  --base-images \"$base_images\" \\\n  --write-result-to \"$RESULT_FILE\" \\\n  --cachi2-artifacts-dir \"$CACHI2_ARTIFACTS_DIR\" \\\n  --registry-allowlist=\"$registry_allowlist\"\n\ncat \"$RESULT_FILE\" | jq -j \".image_url\" >\"$RESULT_SOURCE_IMAGE_URL\"\ncat \"$RESULT_FILE\" | jq -j \".image_digest\" >\"$RESULT_SOURCE_IMAGE_DIGEST\"\njq -j '\"\\(.image_url)@\\(.image_digest)\"' \"${RESULT_FILE}\" >\"/tekton/results/IMAGE_REF\"\n\ncp \"$RESULT_FILE\" \"$WS_BUILD_RESULT_FILE\"\n",
                    "environment": {
                      "container": "build",
                      "image": "oci://quay.io/konflux-ci/source-container-build@sha256:9da8982d99263a7f1ee030340779ed7e7a5c95a0e82a535aeb3fe3eebc5b338c"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:11:40Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-729a3eb43e42e4ae-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "deprecated-base-image-check",
                      "tekton.dev/task": "deprecated-image-check"
                    }
                  },
                  "parameters": {
                    "BASE_IMAGES_DIGESTS": "",
                    "CA_TRUST_CONFIG_MAP_KEY": "ca-bundle.crt",
                    "CA_TRUST_CONFIG_MAP_NAME": "trusted-ca",
                    "IMAGE_DIGEST": "sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
                    "IMAGE_URL": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "POLICY_DIR": "/project/repository/",
                    "POLICY_NAMESPACE": "required_checks"
                  }
                },
                "name": "deprecated-base-image-check",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "deprecated-image-check"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-deprecated-image-check:0.5@sha256:ced089bd8d86f95ee70f6ee1a6941d677f1c66c3b8f02fa60f9309c6c32e1929"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGES_PROCESSED",
                    "type": "string",
                    "value": "{\"image\": {\"pullspec\": \"quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\", \"digests\": [\"sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b\",\"sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32\",\"sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a\"]}}\n"
                  },
                  {
                    "name": "TEST_OUTPUT",
                    "type": "string",
                    "value": "{\"result\":\"SUCCESS\",\"timestamp\":\"2025-02-10T01:11:39+00:00\",\"note\":\"Task deprecated-image-check completed: Check result for task result.\",\"namespace\":\"required_checks\",\"successes\":1,\"failures\":0,\"warnings\":0}\n"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\nsource /utils.sh\ntrap 'handle_error /tekton/results/TEST_OUTPUT' EXIT\n\nIMAGES_TO_BE_PROCESSED_PATH=\"/tmp/images_to_be_processed.txt\"\ntouch /tmp/images_to_be_processed.txt\n\nsuccess_counter=0\nfailure_counter=0\nerror_counter=0\nwarnings_counter=0\n\nimages_processed_template='{\"image\": {\"pullspec\": \"'\"$IMAGE_URL\"'\", \"digests\": [%s]}}'\ndigests_processed=()\n\nimagewithouttag=$(echo -n $IMAGE_URL | sed \"s/\\(.*\\):.*/\\1/\")\n# strip new-line escape symbol from parameter and save it to variable\nimageanddigest=$(echo -n $imagewithouttag@$IMAGE_DIGEST)\n\n# Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes\nimage_manifests=$(get_image_manifests -i ${imageanddigest})\nif [ -n \"$image_manifests\" ]; then\n  while read -r arch arch_sha; do\n    SBOM_FILE_PATH=$(echo \"/tmp/sbom-$arch.json\")\n    arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)\n\n    # Get base images from SBOM\n    cosign download sbom $arch_imageanddigest > ${SBOM_FILE_PATH}\n    if [ $? -ne 0 ]; then\n      echo \"Unable to download sbom for arch $arch.\"\n      continue\n    fi\n\n    < \"${SBOM_FILE_PATH}\" jq -r '\n        if .bomFormat == \"CycloneDX\" then\n            .formulation[]?\n            | .components[]?\n            | select(any(.properties[]?; .name | test(\"^konflux:container:is_(base|builder)_image\")))\n            | .name\n        else\n            .packages[]\n            | select(any(.annotations[]?.comment; (fromjson?).name? | test(\"^konflux:container:is_(base|builder)_image\")?))\n            | .name\n        end\n    ' >> \"${IMAGES_TO_BE_PROCESSED_PATH}\"\n    echo \"Detected base images from $arch SBOM:\"\n    cat \"${IMAGES_TO_BE_PROCESSED_PATH}\"\n    echo \"\"\n\n    digests_processed+=(\"\\\"$arch_sha\\\"\")\n  done < <(echo \"$image_manifests\" | jq -r 'to_entries[] | \"\\(.key) \\(.value)\"')\nfi\n\n# If the image is an Image Index, also add the Image Index digest to the list.\nif [[ \"${digests_processed[*]}\" != *\"$IMAGE_DIGEST\"* ]]; then\n  digests_processed+=(\"\\\"$IMAGE_DIGEST\\\"\")\nfi\n\ndigests_processed_string=$(IFS=,; echo \"${digests_processed[*]}\")\n\nif [ -n \"${BASE_IMAGES_DIGESTS}\" ];\nthen\n  echo \"Base images passed by param BASE_IMAGES_DIGESTS: $BASE_IMAGES_DIGESTS\"\n  # Get images from the parameter\n  for IMAGE_WITH_TAG in $(echo -n \"$BASE_IMAGES_DIGESTS\" | sed 's/\\\\n/\\'$'\\n''/g' );\n  do\n    echo $IMAGE_WITH_TAG | cut -d \":\" -f1 >> ${IMAGES_TO_BE_PROCESSED_PATH}\n  done\nfi\n\n# we want to remove duplicated entries\nBASE_IMAGES=$(sort -u \"${IMAGES_TO_BE_PROCESSED_PATH}\")\n\necho \"Images to be checked:\"\necho \"$BASE_IMAGES\"\necho \"\"\n\nfor BASE_IMAGE in ${BASE_IMAGES};\ndo\n  IFS=:'/' read -r IMAGE_REGISTRY IMAGE_REPOSITORY<<< $BASE_IMAGE\n\n  # Red Hat Catalog hack: registry.redhat.io must be queried as registry.access.redhat.com in Red Hat catalog\n  IMAGE_REGISTRY_CATALOG=$(echo \"${IMAGE_REGISTRY}\" | sed 's/^registry.redhat.io$/registry.access.redhat.com/')\n\n  export IMAGE_REPO_PATH=/tmp/${IMAGE_REPOSITORY}\n  mkdir -p ${IMAGE_REPO_PATH}\n  echo \"Querying Red Hat Catalog for $BASE_IMAGE.\"\n  http_code=$(curl -s -o ${IMAGE_REPO_PATH}/repository_data.json -w '%{http_code}' \"https://catalog.redhat.com/api/containers/v1/repositories/registry/${IMAGE_REGISTRY_CATALOG}/repository/${IMAGE_REPOSITORY}\")\n\n  if [ \"$http_code\" == \"200\" ];\n  then\n    echo \"Running conftest using $POLICY_DIR policy, $POLICY_NAMESPACE namespace.\"\n    /usr/bin/conftest test --no-fail ${IMAGE_REPO_PATH}/repository_data.json \\\n    --policy $POLICY_DIR --namespace $POLICY_NAMESPACE \\\n    --output=json | tee ${IMAGE_REPO_PATH}/deprecated_image_check_output.json\n\n    failures_num=$(jq -r '.[].failures|length' ${IMAGE_REPO_PATH}/deprecated_image_check_output.json)\n    if [[ \"${failures_num}\" -gt 0 ]]; then\n      echo \"[FAILURE] Image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY} has been deprecated\"\n    fi\n    failure_counter=$((failure_counter+failures_num))\n\n    successes_num=$(jq -r '.[].successes' ${IMAGE_REPO_PATH}/deprecated_image_check_output.json)\n    if [[ \"${successes_num}\" -gt 0 ]]; then\n      echo \"[SUCCESS] Image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY} is valid\"\n    fi\n    success_counter=$((success_counter+successes_num))\n\n  elif [ \"$http_code\" == \"404\" ];\n  then\n    echo \"[WARNING] Registry/image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY} not found in Red Hat Catalog. Task cannot provide results if image is deprecated.\"\n    warnings_counter=$((warnings_counter+1))\n  else\n    echo \"[ERROR] Unexpected error (HTTP code: ${http_code}) occurred for registry/image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}.\"\n    error_counter=$((error_counter+1))\n  fi\ndone\n\nnote=\"Task deprecated-image-check failed: Command conftest failed. For details, check Tekton task log.\"\nERROR_OUTPUT=$(make_result_json -r ERROR -n \"$POLICY_NAMESPACE\" -t \"$note\")\n\nnote=\"Task deprecated-image-check completed: Check result for task result.\"\nif [[ \"$error_counter\" == 0 ]];\nthen\n  if [[ \"${failure_counter}\" -gt 0 ]]; then\n    RES=\"FAILURE\"\n  elif [[ \"${warnings_counter}\" -gt 0 ]]; then\n    RES=\"WARNING\"\n  elif [[ \"${success_counter}\" -eq 0 ]]; then\n    # when all counters are 0, there are no base images to check\n    note=\"Task deprecated-image-check success: No base images to check.\"\n    RES=\"SUCCESS\"\n  else\n    RES=\"SUCCESS\"\n  fi\n  TEST_OUTPUT=$(make_result_json \\\n    -r \"${RES}\" -n \"$POLICY_NAMESPACE\" \\\n    -s \"${success_counter}\" -f \"${failure_counter}\" -w \"${warnings_counter}\" -t \"$note\")\nfi\necho \"${TEST_OUTPUT:-${ERROR_OUTPUT}}\" | tee /tekton/results/TEST_OUTPUT\n\necho \"${images_processed_template/\\[%s]/[$digests_processed_string]}\" | tee /tekton/results/IMAGES_PROCESSED\n",
                    "environment": {
                      "container": "check-images",
                      "image": "oci://quay.io/konflux-ci/konflux-test@sha256:3e2a8daead8ed5a1aa09878c74c2d5a7a77bdc1a946db5a6adb7ad238d813084"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:12:00Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-7565c9321e47a8db-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "rpms-signature-scan",
                      "tekton.dev/task": "rpms-signature-scan"
                    }
                  },
                  "parameters": {
                    "ca-trust-config-map-key": "ca-bundle.crt",
                    "ca-trust-config-map-name": "trusted-ca",
                    "image-digest": "sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
                    "image-url": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "workdir": "/tmp"
                  }
                },
                "name": "rpms-signature-scan",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "rpms-signature-scan"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-rpms-signature-scan:0.2@sha256:e603b3df510aeefeaa12e8778c4642b21743cb0ae68704359dc7ffd2814249d2"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGES_PROCESSED",
                    "type": "string",
                    "value": "{\"image\": {\"pullspec\": \"quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\", \"digests\": [\"sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b\", \"sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32\", \"sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a\"]}}\n"
                  },
                  {
                    "name": "RPMS_DATA",
                    "type": "string",
                    "value": "{\"keys\": {\"199e2f91fd431d51\": 40, \"unsigned\": 0}}\n"
                  },
                  {
                    "name": "TEST_OUTPUT",
                    "type": "string",
                    "value": "{\"result\":\"SUCCESS\",\"timestamp\":\"2025-02-10T01:11:59+00:00\",\"note\":\"Task rpms-signature-scan completed successfully\",\"namespace\":\"default\",\"successes\":0,\"failures\":0,\"warnings\":0}\n"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -ex\nset -o pipefail\n\nrpm_verifier \\\n  --image-url \"${IMAGE_URL}\" \\\n  --image-digest \"${IMAGE_DIGEST}\" \\\n  --workdir \"${WORKDIR}\" \\\n",
                    "environment": {
                      "container": "rpms-signature-scan",
                      "image": "oci://quay.io/redhat-appstudio/tools@sha256:0e979f6498e4b257553b0daba26c9ca320d71289a874ee50500801fa39c07792"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -ex\n\nsource /utils.sh\nstatus=$(cat \"${WORKDIR}\"/status)\nrpms_data=$(cat \"${WORKDIR}\"/results)\nimages_processed=$(cat \"${WORKDIR}\"/images_processed)\nif [ \"$status\" == \"ERROR\" ]; then\n  note=\"Task rpms-signature-scan failed to scan images. Refer to Tekton task output for details\"\nelse\n  note=\"Task rpms-signature-scan completed successfully\"\nfi\n\nTEST_OUTPUT=$(make_result_json -r \"$status\" -t \"$note\")\necho \"${TEST_OUTPUT}\" | tee \"/tekton/results/TEST_OUTPUT\"\necho \"${rpms_data}\" | tee \"/tekton/results/RPMS_DATA\"\necho \"${images_processed}\" | tee \"/tekton/results/IMAGES_PROCESSED\"\n",
                    "environment": {
                      "container": "output-results",
                      "image": "oci://quay.io/konflux-ci/konflux-test@sha256:4ee06e7d8bb3a9b9503f8f1293ee70c521aa51662e11335439b87f81bda6e246"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:11:54Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-223a69a2ef913960-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "clair-scan",
                      "tekton.dev/task": "clair-scan"
                    }
                  },
                  "parameters": {
                    "ca-trust-config-map-key": "ca-bundle.crt",
                    "ca-trust-config-map-name": "trusted-ca",
                    "docker-auth": "",
                    "image-digest": "sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
                    "image-url": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
                  }
                },
                "name": "clair-scan",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "clair-scan"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.2@sha256:f636f2cbe91d9d4d9685a38c8bc680a36e17f568ec0e60a93da82d1284b488c5"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGES_PROCESSED",
                    "type": "string",
                    "value": "{\"image\": {\"pullspec\": \"quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\", \"digests\": [\"sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b\",\"sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32\",\"sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a\"]}}\n"
                  },
                  {
                    "name": "REPORTS",
                    "type": "string",
                    "value": "{\"sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b\":\"sha256:e60b34d997c9a69596b378a709ee28c8dd46850882b904500b4a9b6d5cfe8044\",\"sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32\":\"sha256:393c4d0afceb9d7420b05639704a048fe7b5401977da51ccf710e7a55b9c9445\"}\n"
                  },
                  {
                    "name": "SCAN_OUTPUT",
                    "type": "string",
                    "value": "{\"vulnerabilities\":{\"critical\":0,\"high\":0,\"medium\":0,\"low\":0,\"unknown\":0},\"unpatched_vulnerabilities\":{\"critical\":0,\"high\":0,\"medium\":8,\"low\":18,\"unknown\":0}}\n"
                  },
                  {
                    "name": "TEST_OUTPUT",
                    "type": "string",
                    "value": "{\"result\":\"SUCCESS\",\"timestamp\":\"2025-02-10T01:11:53+00:00\",\"note\":\"Task clair-scan completed: Refer to Tekton task result SCAN_OUTPUT for vulnerabilities scanned by Clair.\",\"namespace\":\"default\",\"successes\":0,\"failures\":0,\"warnings\":0}\n"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\n. /utils.sh\n\nimagewithouttag=$(echo -n $IMAGE_URL | sed \"s/\\(.*\\):.*/\\1/\")\n# strip new-line escape symbol from parameter and save it to variable\nimageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)\necho \"Inspecting raw image manifest $imageanddigest.\"\n\n# Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes\nimage_manifests=$(get_image_manifests -i ${imageanddigest})\nif [ -n \"$image_manifests\" ]; then\n  echo \"$image_manifests\" | jq -r 'to_entries[] | \"\\(.key) \\(.value)\"' | while read -r arch arch_sha; do\n    echo \"$arch_sha\" > /tekton/home/image-manifest-$arch.sha\n  done\nfi\n",
                    "environment": {
                      "container": "get-image-manifests",
                      "image": "oci://quay.io/konflux-ci/konflux-test@sha256:3e2a8daead8ed5a1aa09878c74c2d5a7a77bdc1a946db5a6adb7ad238d813084"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nimagewithouttag=$(echo -n $IMAGE_URL | sed \"s/\\(.*\\):.*/\\1/\")\nimages_processed_template='{\"image\": {\"pullspec\": \"'\"$IMAGE_URL\"'\", \"digests\": [%s]}}'\ndigests_processed=()\n\n# the quay report format used by the Conftest rules in the\n# conftest-vulnerabilities step doesn't contain the \"issued\" date which\n# we require in the policy rules, so we resort to running clair-action\n# twice to produce both quay and clair formatted output\nclair_report() {\n  { clair-action report --image-ref=\"$1\" --db-path=/tmp/matcher.db --format=quay | tee \"clair-result-$2.json\"; } && \\\n  { clair-action report --image-ref=\"$1\" --db-path=/tmp/matcher.db --format=clair > \"clair-report-$2.json\"; }\n}\n\nfor sha_file in image-manifest-*.sha; do\n  if [ -e \"$sha_file\" ]; then\n    arch_sha=$(cat \"$sha_file\")\n    arch=$(basename \"$sha_file\" | sed 's/image-manifest-//;s/.sha//')\n    arch_specific_digest=\"$imagewithouttag@$arch_sha\"\n\n    echo \"Running clair-action on $arch image manifest.\"\n    # run the scan for each image manifest in the image index\n    clair_report \"${arch_specific_digest}\" \"${arch}\" || true\n\n    digests_processed+=(\"\\\"$arch_sha\\\"\")\n  fi\ndone\n\n# If the image is an Image Index, also add the Image Index digest to the list.\nif [[ \"${digests_processed[*]}\" != *\"$IMAGE_DIGEST\"* ]]; then\n  digests_processed+=(\"\\\"$IMAGE_DIGEST\\\"\")\nfi\ndigests_processed_string=$(IFS=,; echo \"${digests_processed[*]}\")\n\nimages_processed=$(echo \"${images_processed_template/\\[%s]/[$digests_processed_string]}\")\necho \"$images_processed\" > images-processed.json\n",
                    "environment": {
                      "container": "get-vulnerabilities",
                      "image": "oci://quay.io/konflux-ci/clair-in-ci@sha256:59918a9c98125ad30bc3a542db931b0b62f43c6bcb04294b548413139fe8ac44"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nif ! compgen -G \"clair-report-*.json\" > /dev/null; then\n  echo 'No Clair reports generated. Skipping upload.'\n  exit 0\nfi\n\necho \"Selecting auth\"\nselect-oci-auth \"$IMAGE_URL\" > \"$HOME/auth.json\"\n\nrepository=\"${IMAGE_URL/:*/}\"\n\narch() {\n  report_file=\"$1\"\n  arch=\"${report_file/*-}\"\n  echo \"${arch/.json/}\"\n}\n\nMEDIA_TYPE='application/vnd.redhat.clair-report+json'\n\nreports_json=\"\"\nfor f in clair-report-*.json; do\n  digest=$(cat \"image-manifest-$(arch \"$f\").sha\")\n  image_ref=\"${repository}@${digest}\"\n  echo \"Attaching $f to ${image_ref}\"\n  report_digest=\"$(oras attach --no-tty --format go-template='{{.digest}}' --registry-config \"$HOME/auth.json\" --artifact-type \"${MEDIA_TYPE}\" \"${image_ref}\" \"$f:${MEDIA_TYPE}\")\"\n  # shellcheck disable=SC2016\n  reports_json=\"$(yq --output-format json --indent=0 eval-all '. as $i ireduce ({}; . * $i)' <(echo \"${reports_json}\") <(echo \"${digest}: ${report_digest}\"))\"\ndone\necho \"${reports_json}\" > reports.json\n",
                    "environment": {
                      "container": "oci-attach-report",
                      "image": "oci://quay.io/konflux-ci/oras@sha256:30d2037fa58653e9849a4ba60a69666dfca9b80a6807bbafd2dd5206c279a061"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\n. /utils.sh\ntrap 'handle_error /tekton/results/TEST_OUTPUT' EXIT\n\nclair_result_files=$(ls /tekton/home/clair-result-*.json)\nif [ -z \"$clair_result_files\" ]; then\n  echo \"Previous step [get-vulnerabilities] failed: No clair-result files found in /tekton/home.\"\nfi\n\nmissing_vulnerabilities_files=\"\"\nfor file in $clair_result_files; do\n  file_suffix=$(basename \"$file\" | sed 's/clair-result-//;s/.json//')\n  if [ ! -s \"$file\" ]; then\n    echo \"Previous step [get-vulnerabilities] failed: $file is empty.\"\n  else\n    /usr/bin/conftest test --no-fail $file \\\n    --policy /project/clair/vulnerabilities-check.rego --namespace required_checks \\\n    --output=json | tee /tekton/home/clair-vulnerabilities-$file_suffix.json || true\n  fi\n\n  #check for missing \"clair-vulnerabilities-<arch>/image-index\" file and create a string\n  if [ ! -f \"/tekton/home/clair-vulnerabilities-$file_suffix.json\" ]; then\n    missing_vulnerabilities_files+=\"${missing_vulnerabilities_files:+, }/tekton/home/clair-vulnerabilities-$file_suffix.json\"\n  fi\ndone\n\nif [ -n \"$missing_vulnerabilities_files\" ]; then\n  note=\"Task clair-scan failed: $missing_vulnerabilities_files did not generate. For details, check Tekton task log.\"\n  TEST_OUTPUT=$(make_result_json -r \"ERROR\" -t \"$note\")\n  echo \"$missing_vulnerabilities_files did not generate correctly. For details, check conftest command in Tekton task log.\"\n  echo \"${TEST_OUTPUT}\" | tee /tekton/results/TEST_OUTPUT\n  exit 0\nfi\n\nscan_result='{\"vulnerabilities\":{\"critical\":0, \"high\":0, \"medium\":0, \"low\":0, \"unknown\":0}, \"unpatched_vulnerabilities\":{\"critical\":0, \"high\":0, \"medium\":0, \"low\":0, \"unknown\":0}}'\nfor file in /tekton/home/clair-vulnerabilities-*.json; do\n    result=$(jq -rce \\\n        '{\n            vulnerabilities:{\n              critical: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_critical_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              high: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_high_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              medium: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_medium_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              low: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_low_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              unknown: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_unknown_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0)\n            },\n            unpatched_vulnerabilities:{\n              critical: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_unpatched_critical_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              high: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_unpatched_high_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              medium: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_unpatched_medium_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              low: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_unpatched_low_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0),\n              unknown: (.[] | .warnings? // [] | map(select(.metadata.details.name==\"clair_unpatched_unknown_vulnerabilities\").metadata.\"vulnerabilities_number\" // 0)| add // 0)\n            }\n        }' \"$file\")\n\n    scan_result=$(jq -s -rce \\\n          '.[0].vulnerabilities.critical += .[1].vulnerabilities.critical |\n          .[0].vulnerabilities.high += .[1].vulnerabilities.high |\n          .[0].vulnerabilities.medium += .[1].vulnerabilities.medium |\n          .[0].vulnerabilities.low += .[1].vulnerabilities.low |\n          .[0].vulnerabilities.unknown += .[1].vulnerabilities.unknown |\n          .[0].unpatched_vulnerabilities.critical += .[1].unpatched_vulnerabilities.critical |\n          .[0].unpatched_vulnerabilities.high += .[1].unpatched_vulnerabilities.high |\n          .[0].unpatched_vulnerabilities.medium += .[1].unpatched_vulnerabilities.medium |\n          .[0].unpatched_vulnerabilities.low += .[1].unpatched_vulnerabilities.low |\n          .[0].unpatched_vulnerabilities.unknown += .[1].unpatched_vulnerabilities.unknown |\n          .[0]' <<<\"$scan_result $result\")\ndone\n\necho \"$scan_result\" | tee \"/tekton/results/SCAN_OUTPUT\"\n\ncat /tekton/home/images-processed.json | tee /tekton/results/IMAGES_PROCESSED\n# shellcheck disable=SC2154\ncat /tekton/home/reports.json > \"/tekton/results/REPORTS\"\n\nnote=\"Task clair-scan completed: Refer to Tekton task result SCAN_OUTPUT for vulnerabilities scanned by Clair.\"\nTEST_OUTPUT=$(make_result_json -r \"SUCCESS\" -t \"$note\")\necho \"${TEST_OUTPUT}\" | tee /tekton/results/TEST_OUTPUT\n",
                    "environment": {
                      "container": "conftest-vulnerabilities",
                      "image": "oci://quay.io/konflux-ci/konflux-test@sha256:3e2a8daead8ed5a1aa09878c74c2d5a7a77bdc1a946db5a6adb7ad238d813084"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:12:23Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-c810900b2572d2cd-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "sast-snyk-check",
                      "tekton.dev/task": "sast-snyk-check"
                    }
                  },
                  "parameters": {
                    "ARGS": "",
                    "IGNORE_FILE_PATHS": "",
                    "IMP_FINDINGS_ONLY": "true",
                    "KFP_GIT_URL": "SITE_DEFAULT",
                    "PROJECT_NAME": "",
                    "RECORD_EXCLUDED": "false",
                    "SNYK_SECRET": "snyk-secret",
                    "caTrustConfigMapKey": "ca-bundle.crt",
                    "caTrustConfigMapName": "trusted-ca",
                    "image-digest": "sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
                    "image-url": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
                  }
                },
                "name": "sast-snyk-check",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "sast-snyk-check"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check:0.3@sha256:30cc34ccf6ca34e7f0951fd508fe4436d07388e7244baab77baf4ef9bdcefff4"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "TEST_OUTPUT",
                    "type": "string",
                    "value": "{\"result\":\"SUCCESS\",\"timestamp\":\"2025-02-10T01:12:22+00:00\",\"note\":\"Task sast-snyk-check success: Snyk code test found zero supported files.\",\"namespace\":\"default\",\"successes\":0,\"failures\":0,\"warnings\":0}\n"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\n\nset -euo pipefail\n# shellcheck source=/dev/null\n. /utils.sh\ntrap 'handle_error /tekton/results/TEST_OUTPUT' EXIT\n\nif [[ -z \"${PROJECT_NAME}\" ]]; then\n    PROJECT_NAME=${COMPONENT_LABEL}\nfi\n\necho \"The PROJECT_NAME used is: ${PROJECT_NAME}\"\n\n# Installation of Red Hat certificates for cloning Red Hat internal repositories\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors\n  update-ca-trust\nfi\n\nSNYK_TOKEN_PATH=\"/etc/secrets/snyk_token\"\nif [ -f \"${SNYK_TOKEN_PATH}\" ] && [ -s \"${SNYK_TOKEN_PATH}\" ]; then\n  # SNYK token is provided\n  SNYK_TOKEN=\"$(cat ${SNYK_TOKEN_PATH})\"\n  export SNYK_TOKEN\nelse\n  # According to shellcheck documentation, the following error can be ignored as it is ignored through indirection: https://www.shellcheck.net/wiki/SC2034\n  # shellcheck disable=SC2034\n  to_enable_snyk='[here](https://konflux-ci.dev/docs/how-tos/testing/build/snyk/)'\n  note=\"Task sast-snyk-check skipped: If you wish to use the Snyk code SAST task, please create a secret name snyk-secret with the key 'snyk_token' containing the Snyk token by following the steps given ${to_enable_snyk}\"\n  TEST_OUTPUT=$(make_result_json -r SKIPPED -t \"$note\")\n  echo \"${TEST_OUTPUT}\" | tee \"/tekton/results/TEST_OUTPUT\"\n  exit 0\nfi\n\nSNYK_EXIT_CODE=0\nSOURCE_CODE_DIR=/workspace/workspace\nSEVERITY_THRESHOLD=\"high\"\nif [ \"${IMP_FINDINGS_ONLY}\" == \"false\" ]; then\n  SEVERITY_THRESHOLD=\"low\"\nfi\n\n# We ignore files using snyk ignore if the user set up the IGNORE_FILE_PATHS variable.\n(cd \"${SOURCE_CODE_DIR}\" && IFS=\",\" && for path in $IGNORE_FILE_PATHS; do\n  snyk ignore --file-path=\"source/${path}\"\ndone)\n\nset +e\n# We do want to expand ARGS (it can be multiple CLI flags, not just one)\n# shellcheck disable=SC2086\nsnyk code test $ARGS --severity-threshold=\"$SEVERITY_THRESHOLD\" \"$SOURCE_CODE_DIR\" --max-depth=1 --sarif-file-output=\"${SOURCE_CODE_DIR}\"/sast_snyk_check_out.json 1>&2>> stdout.txt\nSNYK_EXIT_CODE=$?\nset -e\ntest_not_skipped=0\nSKIP_MSG=\"We found 0 supported files\"\ngrep -q \"$SKIP_MSG\" stdout.txt || test_not_skipped=$?\n\nif [[ \"$SNYK_EXIT_CODE\" -eq 0 ]] || [[ \"$SNYK_EXIT_CODE\" -eq 1 ]]; then\n  # In order to generate csdiff/v1, we need to add the whole path of the source code as Snyk only provides an URI to embed the context\n  (cd  \"${SOURCE_CODE_DIR}\" && csgrep --mode=json --embed-context=3 \"${SOURCE_CODE_DIR}\"/sast_snyk_check_out.json) \\\n    | csgrep --mode=json --strip-path-prefix=\"source/\"  \\\n    > sast_snyk_check_out_all_findings.json\n\n  echo \"Results:\"\n  (set -x && csgrep --mode=evtstat sast_snyk_check_out_all_findings.json)\n\n  # Set KFP_GIT_URL to https://gitlab.cee.redhat.com/osh/known-false-positives.git for internal Konflux instance\n  # p01 will be decommissionned due to lack of IBM support\n  if [[ \"${KFP_GIT_URL}\" == \"SITE_DEFAULT\" ]]; then\n    case \"${BUILD_PLR_LOG_URL}\" in\n    *konflux.apps.stone-prod-p02.hjvn.p1.openshiftapps.com* | *konflux.apps.stone-prod-p01.wcfb.p1.openshiftapps.com*)\n      echo \"the task is running within Red Hat network, set KFP_GIT_URL to https://gitlab.cee.redhat.com/osh/known-false-positives.git\"\n      KFP_GIT_URL=\"https://gitlab.cee.redhat.com/osh/known-false-positives.git\"\n      ;;\n    *)\n      echo \"the task is not running within Red Hat network, set KFP_GIT_URL to empty string\"\n      KFP_GIT_URL=\n      ;;\n    esac\n  fi\n\n  # We check if the KFP_GIT_URL variable is set to apply the filters or not\n  if [[ -z \"${KFP_GIT_URL}\" ]]; then\n    echo \"KFP_GIT_URL variable not defined. False positives won't be filtered\"\n    mv sast_snyk_check_out_all_findings.json filtered_sast_snyk_check_out.json\n  else\n    echo \"Filtering false positives in results files using csfilter-kfp...\"\n\n    CMD=(\n      csfilter-kfp\n      --verbose\n      --kfp-git-url=\"${KFP_GIT_URL}\"\n      --project-nvr=\"${PROJECT_NAME}\"\n    )\n\n    if [ \"${RECORD_EXCLUDED}\" == \"true\" ]; then\n      CMD+=(--record-excluded=\"excluded-findings.json\")\n    fi\n\n    set +e\n    \"${CMD[@]}\" sast_snyk_check_out_all_findings.json > filtered_sast_snyk_check_out.json\n    status=$?\n    set -e\n    if [ \"$status\" -ne 0 ]; then\n      echo \"Error: failed to filter known false positives\" >&2\n      return 1\n    else\n      echo \"Message: Succeed to filter known false positives\" >&2\n    fi\n    echo \"Results after filtering:\"\n    (set -x && csgrep --mode=evtstat filtered_sast_snyk_check_out.json)\n  fi\n\n  # Generation of scan stats\n\n  total_files=$(jq '[.runs[0].properties.coverage[].files] | add' \"${SOURCE_CODE_DIR}\"/sast_snyk_check_out.json)\n  supported_files=$(jq '[.runs[0].properties.coverage[] | select(.type == \"SUPPORTED\") | .files] | add' \"${SOURCE_CODE_DIR}\"/sast_snyk_check_out.json)\n\n  # We make sure the values are 0 if no supported/total files are found\n  if [ \"$total_files\" = \"null\" ] || [ -z \"$total_files\" ]; then\n    total_files=0\n  fi\n\n  if [ \"$supported_files\" = \"null\" ] || [ -z \"$supported_files\" ]; then\n    supported_files=0\n  fi\n\n  coverage_ratio=0\n  if (( total_files > 0 )); then\n      coverage_ratio=$((supported_files * 100 / total_files))\n  fi\n\n  # embed stats in results file and convert to SARIF\n  csgrep --mode=sarif --set-scan-prop snyk-scanned-files-coverage:\"${coverage_ratio}\" \\\n                      --set-scan-prop snyk-scanned-files-success:\"${supported_files}\"  \\\n                      --set-scan-prop snyk-scanned-files-total:\"${total_files}\" \\\n                      filtered_sast_snyk_check_out.json  > sast_snyk_check_out.sarif\n\n  TEST_OUTPUT=\n  parse_test_output \"sast-snyk-check\" sarif sast_snyk_check_out.sarif  || true\n\n# When the test is skipped, the \"SNYK_EXIT_CODE\" is 3 and it can also be 3 in some other situation\nelif [[ \"$test_not_skipped\" -eq 0 ]]; then\n  note=\"Task sast-snyk-check success: Snyk code test found zero supported files.\"\n  ERROR_OUTPUT=$(make_result_json -r SUCCESS -t \"$note\")\nelse\n  echo \"sast-snyk-check test failed because of the following issues:\"\n  cat stdout.txt\n  note=\"Task sast-snyk-check failed: For details, check Tekton task log.\"\n  ERROR_OUTPUT=$(make_result_json -r ERROR -t \"$note\")\nfi\necho \"${TEST_OUTPUT:-${ERROR_OUTPUT}}\" | tee \"/tekton/results/TEST_OUTPUT\"\n",
                    "environment": {
                      "container": "sast-snyk-check",
                      "image": "oci://quay.io/konflux-ci/konflux-test@sha256:3e2a8daead8ed5a1aa09878c74c2d5a7a77bdc1a946db5a6adb7ad238d813084"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\n\nif [ -z \"${IMAGE_URL}\" ]; then\n  echo 'No image-url provided. Skipping upload.'\n  exit 0\nfi\n\nUPLOAD_FILES=\"sast_snyk_check_out.sarif excluded-findings.json\"\nfor UPLOAD_FILE in ${UPLOAD_FILES}; do\n    if [ ! -f \"${UPLOAD_FILE}\" ]; then\n      echo \"No ${UPLOAD_FILE} exists. Skipping upload.\"\n      continue\n    fi\n    if [ \"${UPLOAD_FILES}\" == \"excluded-findings.json\" ]; then\n        MEDIA_TYPE=application/json\n    else\n        MEDIA_TYPE=application/sarif+json\n    fi\n    echo \"Selecting auth\"\n    select-oci-auth \"${IMAGE_URL}\" > \"${HOME}/auth.json\"\n    echo \"Attaching to ${IMAGE_URL}\"\n    oras attach --no-tty --registry-config \"$HOME/auth.json\" --artifact-type \"${MEDIA_TYPE}\" \"${IMAGE_URL}\" \"${UPLOAD_FILE}:${MEDIA_TYPE}\"\ndone\n",
                    "environment": {
                      "container": "upload",
                      "image": "oci://quay.io/konflux-ci/oras@sha256:30d2037fa58653e9849a4ba60a69666dfca9b80a6807bbafd2dd5206c279a061"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:12:17Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "virus, konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-c575a8d3111c43e2-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "clamav-scan",
                      "tekton.dev/task": "clamav-scan"
                    }
                  },
                  "parameters": {
                    "ca-trust-config-map-key": "ca-bundle.crt",
                    "ca-trust-config-map-name": "trusted-ca",
                    "docker-auth": "",
                    "image-digest": "sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
                    "image-url": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
                  }
                },
                "name": "clamav-scan",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "clamav-scan"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.2@sha256:0db068e8a59612472a2483f5113893d0c5c9102e9ad7647d9a4789360e5bc2dc"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "IMAGES_PROCESSED",
                    "type": "string",
                    "value": "{\"image\": {\"pullspec\": \"quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\", \"digests\": [\"sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b\",\"sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32\",\"sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a\"]}}\n"
                  },
                  {
                    "name": "TEST_OUTPUT",
                    "type": "string",
                    "value": "{\"timestamp\":\"1739149934\",\"namespace\":\"required_checks\",\"successes\":4,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\",\"note\":\"All checks passed successfully\"}\n"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\nset -euo pipefail\n. /utils.sh\ntrap 'handle_error /tekton/results/TEST_OUTPUT' EXIT\n\nimagewithouttag=$(echo $IMAGE_URL | sed \"s/\\(.*\\):.*/\\1/\" | tr -d '\\n')\n\n# strip new-line escape symbol from parameter and save it to variable\nimageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)\n\n# check if image is attestation one, skip the clamav scan in such case\nif [[ $imageanddigest == *.att ]]\nthen\n    echo \"$imageanddigest is an attestation image. Skipping ClamAV scan.\"\n    exit 0\nfi\n\nimages_processed_template='{\"image\": {\"pullspec\": \"'\"$IMAGE_URL\"'\", \"digests\": [%s]}}'\ndigests_processed=()\nmkdir logs\nmkdir content\ncd content\necho \"Extracting image(s).\"\n\n# Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes\nimage_manifests=$(get_image_manifests -i ${imageanddigest})\nif [ -n \"$image_manifests\" ]; then\n  while read -r arch arch_sha; do\n    destination=$(echo content-$arch)\n    mkdir -p \"$destination\"\n    arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)\n\n    echo \"Running \\\"oc image extract\\\" on image of arch $arch\"\n    oc image extract --registry-config ~/.docker/config.json $arch_imageanddigest --path=\"/:${destination}\" --filter-by-os=\"linux/${arch}\"\n    if [ $? -ne 0 ]; then\n      echo \"Unable to extract image for arch $arch. Skipping ClamAV scan!\"\n      exit 0\n    fi\n\n    db_version=$(clamscan --version | sed 's|.*/\\(.*\\)/.*|\\1|')\n\n    echo \"Scanning image for arch $arch. This operation may take a while.\"\n    clamscan \"${destination}\" -ri --max-scansize=4095M --max-filesize=2000M \\\n      --max-scantime=0 --max-files=0 --max-recursion=1000 --max-dir-recursion=20000 --max-embeddedpe=4095M \\\n      --max-htmlnormalize=10M --max-htmlnotags=4095M --max-scriptnormalize=5M --max-ziptypercg=4095M \\\n      --max-partitions=50000 --max-iconspe=100000 --max-rechwp3=20000 --pcre-match-limit=100000000 --pcre-recmatch-limit=2000000 \\\n      --pcre-max-filesize=4095M --alert-exceeds-max=yes \\\n      --alert-encrypted=yes --alert-encrypted-archive=yes --alert-encrypted-doc=yes --alert-macros=yes \\\n      --alert-phishing-ssl=yes --alert-phishing-cloak=yes --alert-partition-intersection=yes \\\n      | tee /work/logs/clamscan-result-$arch.log || true\n\n    echo \"Executed-on: Scan was executed on clamscan version - $(clamscan --version) Database version: $db_version\" | tee -a \"/work/logs/clamscan-result-$arch.log\"\n\n    digests_processed+=(\"\\\"$arch_sha\\\"\")\n\n    if [[ -e \"/work/logs/clamscan-result-$arch.log\" ]]; then\n      # file_suffix=$(basename \"$file\" | sed 's/clamscan-result-//;s/.log//')\n      # OPA/EC requires structured data input, add clamAV log into json\n      jq -Rs '{ output: . }' /work/logs/clamscan-result-$arch.log > /work/logs/clamscan-result-log-$arch.json\n\n      EC_EXPERIMENTAL=1 ec test \\\n        --namespace required_checks \\\n        --policy /project/clamav/virus-check.rego \\\n        -o json \\\n        /work/logs/clamscan-result-log-$arch.json || true\n\n      # workaround: due to a bug in ec-cli, we cannot generate json and appstudio output at the same time, running it again\n      EC_EXPERIMENTAL=1 ec test \\\n        --namespace required_checks \\\n        --policy /project/clamav/virus-check.rego \\\n        -o appstudio \\\n        /work/logs/clamscan-result-log-$arch.json | tee /work/logs/clamscan-ec-test-$arch.json || true\n\n      cat /work/logs/clamscan-ec-test-$arch.json\n    fi\n  done < <(echo \"$image_manifests\" | jq -r 'to_entries[] | \"\\(.key) \\(.value)\"')\nfi\n\njq -s -rce '\n  reduce .[] as $item ({\"timestamp\":\"0\",\"namespace\":\"\",\"successes\":0,\"failures\":0,\"warnings\":0,\"result\":\"\",\"note\":\"\"};\n    {\n    \"timestamp\" : (if .timestamp < $item.timestamp then $item.timestamp else .timestamp end),\n    \"namespace\" : $item.namespace,\n    \"successes\" : (.successes + $item.successes),\n    \"failures\" : (.failures + $item.failures),\n    \"warnings\" : (.warnings + $item.warnings),\n    \"result\" : (if .result == \"\" or ($item.result == \"SKIPPED\" and .result == \"SUCCESS\") or ($item.result == \"WARNING\" and (.result == \"SUCCESS\" or .result == \"SKIPPED\")) or ($item.result == \"FAILURE\" and .result != \"ERROR\") or $item.result == \"ERROR\" then $item.result else .result end),\n    \"note\" : (if .result == \"\" or ($item.result == \"SKIPPED\" and .result == \"SUCCESS\") or ($item.result == \"WARNING\" and (.result == \"SUCCESS\" or .result == \"SKIPPED\")) or ($item.result == \"FAILURE\" and .result != \"ERROR\") or $item.result == \"ERROR\" then $item.note else .note end)\n    })' /work/logs/clamscan-ec-test-*.json | tee /tekton/results/TEST_OUTPUT\n\n# If the image is an Image Index, also add the Image Index digest to the list.\nif [[ \"${digests_processed[*]}\" != *\"$IMAGE_DIGEST\"* ]]; then\n  digests_processed+=(\"\\\"$IMAGE_DIGEST\\\"\")\nfi\n\ndigests_processed_string=$(IFS=,; echo \"${digests_processed[*]}\")\necho \"${images_processed_template/\\[%s]/[$digests_processed_string]}\" | tee /tekton/results/IMAGES_PROCESSED\n",
                    "environment": {
                      "container": "extract-and-scan-image",
                      "image": "oci://quay.io/konflux-ci/clamav-db@sha256:275ecad6b3ba401d886abf67a5db82017e9254c2585f5e180f580070c82872b9"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\n\ncd logs\n\nfor UPLOAD_FILE in $(find . -name \"clamscan-result*.log\"); do\n  MEDIA_TYPE=text/vnd.clamav\n  args+=(\"${UPLOAD_FILE}:${MEDIA_TYPE}\")\ndone\nfor UPLOAD_FILE in $(find . -name \"clamscan-ec-test*.json\"); do\n  MEDIA_TYPE=application/vnd.konflux.test_output+json\n  args+=(\"${UPLOAD_FILE}:${MEDIA_TYPE}\")\ndone\n\nif [ -z \"${args}\" ]; then\n  echo \"No files found. Skipping upload.\"\n  exit 0;\nfi\n\necho \"Selecting auth\"\nselect-oci-auth $IMAGE_URL > $HOME/auth.json\necho \"Attaching to ${IMAGE_URL}\"\n oras attach --no-tty --registry-config \"$HOME/auth.json\" --artifact-type application/vnd.clamav \"${IMAGE_URL}\" \"${args[@]}\"\n",
                    "environment": {
                      "container": "upload",
                      "image": "oci://quay.io/konflux-ci/oras@sha256:30d2037fa58653e9849a4ba60a69666dfca9b80a6807bbafd2dd5206c279a061"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:12:10Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-60dd528921efe978-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "tasks",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "verify-signed-rpms",
                      "tekton.dev/task": "verify-signed-rpms"
                    }
                  },
                  "parameters": {
                    "FAIL_UNSIGNED": "false",
                    "INPUT": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c@sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
                    "WORKDIR": "/tmp"
                  }
                },
                "name": "verify-signed-rpms",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "verify-signed-rpms"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-verify-signed-rpms:0.1@sha256:f20cb69f1bc97daaac31ea6ee5efd0fccbeb5ed5dc3575512478fea74bd16376"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "results": [
                  {
                    "name": "TEST_OUTPUT",
                    "type": "string",
                    "value": "{\"result\":\"SUCCESS\",\"timestamp\":\"2025-02-10T01:12:10+00:00\",\"note\":\"Task verify-signed-rpms completed: No unsigned RPMs\",\"namespace\":\"default\",\"successes\":0,\"failures\":0,\"warnings\":0}\n"
                  }
                ],
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:11:32Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -ex\nset -o pipefail\n\nrpm_verifier \\\n  --input \"${INPUT}\" \\\n  --fail-unsigned \"${FAIL_UNSIGNED}\" \\\n  --workdir \"${WORKDIR}\" \\\n  --status-path \"${WORKDIR}\"/status\n",
                    "environment": {
                      "container": "verify-signed-rpms",
                      "image": "oci://quay.io/redhat-appstudio/tools@sha256:546edb7efb75a030ad292fb05e0321357f28516ce279c09d54965cadcdd44d2b"
                    }
                  },
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\nset -ex\n\nsource /utils.sh\nstatus=`cat \"${WORKDIR}\"/status`\nif [ \"$status\" == \"ERROR\" ]; then\n  note=\"Task verify-signed-rpms completed: Not all RPMs were confirmed to be signed. Refer to Tekton task output for details\"\nelse\n  note=\"Task verify-signed-rpms completed: No unsigned RPMs\"\nfi\n\nTEST_OUTPUT=$(make_result_json -r \"$status\" -t \"$note\")\necho \"${TEST_OUTPUT}\" | tee /tekton/results/TEST_OUTPUT\n",
                    "environment": {
                      "container": "output-results",
                      "image": "oci://quay.io/konflux-ci/konflux-test@sha256:a4546a8669dcb401a9edc05fcdc5eb3043050b6a827b44c3c907204d4dbe40f0"
                    }
                  }
                ]
              },
              {
                "after": [
                  "build-container"
                ],
                "finishedOn": "2025-02-10T01:12:30Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-57f2addcff601cd0-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "finally",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "show-sbom",
                      "tekton.dev/task": "show-sbom"
                    }
                  },
                  "parameters": {
                    "CA_TRUST_CONFIG_MAP_KEY": "ca-bundle.crt",
                    "CA_TRUST_CONFIG_MAP_NAME": "trusted-ca",
                    "IMAGE_URL": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "PLATFORM": "linux/amd64"
                  }
                },
                "name": "show-sbom",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "show-sbom"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1@sha256:945a7c9066d3e0a95d3fddb7e8a6992e4d632a2a75d8f3a9bd2ff2fef0ec9aa0"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:12:23Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/bin/bash\n\ndownload_sbom_with_retry() {\n  status=-1\n  max_try=5\n  wait_sec=2\n\n  PLATFORM_ARG=\"$1\"\n  for run in $(seq 1 $max_try); do\n    status=0\n    cosign download sbom $PLATFORM_ARG $IMAGE_URL 2>>err\n    status=$?\n    if [ \"$status\" -eq 0 ]; then\n      break\n    fi\n    sleep $wait_sec\n  done\n  if [ \"$status\" -ne 0 ]; then\n    echo \"Failed to get SBOM after ${max_try} tries\" >&2\n    cat err >&2\n  fi\n}\n\nRAW_OUTPUT=$(skopeo inspect --no-tags --raw docker://${IMAGE_URL})\nif [ $(jq -r '.mediaType' <<< $RAW_OUTPUT) == \"application/vnd.oci.image.manifest.v1+json\" ] ; then\n  ARCHES=\"\"\nelse\n  # Multi arch\n  ARCHES=$(jq -r '.manifests[].platform.architecture' <<< $RAW_OUTPUT)\nfi\n\nif [ -z \"${ARCHES}\" ] ; then\n  # single arch image\n  download_sbom_with_retry \"\"\nelse\n  download_sbom_with_retry \" --platform=$PLATFORM \"\nfi\n",
                    "environment": {
                      "container": "show-sbom",
                      "image": "oci://quay.io/konflux-ci/appstudio-utils@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
                    }
                  }
                ]
              },
              {
                "after": [
                  "clone-repository"
                ],
                "finishedOn": "2025-02-10T01:12:29Z",
                "invocation": {
                  "configSource": {},
                  "environment": {
                    "annotations": {
                      "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "build.appstudio.redhat.com/target_branch": "main",
                      "pipeline.tekton.dev/release": "1dd488e",
                      "pipelinesascode.tekton.dev/branch": "main",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                      "pipelinesascode.tekton.dev/git-provider": "github",
                      "pipelinesascode.tekton.dev/installation-id": "34493006",
                      "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                      "pipelinesascode.tekton.dev/max-keep-runs": "3",
                      "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                      "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                      "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                      "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}",
                      "tekton.dev/pipelines.minVersion": "0.12.1",
                      "tekton.dev/tags": "konflux",
                      "tekton.dev/taskrunSpanContext": "{\"traceparent\":\"00-7e3e5da8080dc76a80ffb1af443a8cdf-8c7b0fdcb188b209-01\"}"
                    },
                    "labels": {
                      "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                      "app.kubernetes.io/version": "v0.31.0",
                      "appstudio.openshift.io/application": "golden-container",
                      "appstudio.openshift.io/component": "golden-container",
                      "pipelines.appstudio.openshift.io/type": "build",
                      "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                      "pipelinesascode.tekton.dev/event-type": "push",
                      "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                      "pipelinesascode.tekton.dev/repository": "golden-container",
                      "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                      "pipelinesascode.tekton.dev/state": "started",
                      "pipelinesascode.tekton.dev/url-org": "conforma",
                      "pipelinesascode.tekton.dev/url-repository": "golden-container",
                      "tekton.dev/memberOf": "finally",
                      "tekton.dev/pipeline": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRun": "golden-container-on-push-ql68v",
                      "tekton.dev/pipelineRunUID": "bc2ef7c2-8730-4538-850a-f100fa0c2ed4",
                      "tekton.dev/pipelineTask": "show-summary",
                      "tekton.dev/task": "summary"
                    }
                  },
                  "parameters": {
                    "build-task-status": "Succeeded",
                    "git-url": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "image-url": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                    "pipelinerun-name": "golden-container-on-push-ql68v"
                  }
                },
                "name": "show-summary",
                "ref": {
                  "params": [
                    {
                      "name": "name",
                      "value": "summary"
                    },
                    {
                      "name": "bundle",
                      "value": "quay.io/konflux-ci/tekton-catalog/task-summary:0.2@sha256:870d9a04d9784840a90b7bf6817cd0d0c4edfcda04b1ba1868cae625a3c3bfcc"
                    },
                    {
                      "name": "kind",
                      "value": "task"
                    }
                  ],
                  "resolver": "bundles"
                },
                "serviceAccountName": "appstudio-pipeline",
                "startedOn": "2025-02-10T01:12:23Z",
                "status": "Succeeded",
                "steps": [
                  {
                    "annotations": null,
                    "arguments": null,
                    "entryPoint": "#!/usr/bin/env bash\necho\necho \"Build Summary:\"\necho\necho \"Build repository: $GIT_URL\"\nif [ \"$BUILD_TASK_STATUS\" == \"Succeeded\" ]; then\n  echo \"Generated Image is in : $IMAGE_URL\"\nfi\nif [ -e \"$SOURCE_BUILD_RESULT_FILE\" ]; then\n  url=$(jq -r \".image_url\" <\"$SOURCE_BUILD_RESULT_FILE\")\n  echo \"Generated Source Image is in : $url\"\nfi\necho\necho End Summary\n",
                    "environment": {
                      "container": "appstudio-summary",
                      "image": "oci://quay.io/konflux-ci/appstudio-utils@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
                    }
                  }
                ]
              }
            ]
          },
          "buildType": "tekton.dev/v1beta1/PipelineRun",
          "builder": {
            "id": "https://tekton.dev/chains/v2"
          },
          "invocation": {
            "configSource": {},
            "environment": {
              "annotations": {
                "build.appstudio.openshift.io/repo": "https://github.com/conforma/golden-container?rev=d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                "build.appstudio.redhat.com/commit_sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                "build.appstudio.redhat.com/target_branch": "main",
                "pipelinesascode.tekton.dev/branch": "main",
                "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                "pipelinesascode.tekton.dev/controller-info": "{\"name\":\"default\",\"configmap\":\"pipelines-as-code\",\"secret\":\"pipelines-as-code-secret\", \"gRepo\": \"pipelines-as-code\"}",
                "pipelinesascode.tekton.dev/event-type": "push",
                "pipelinesascode.tekton.dev/git-auth-secret": "pac-gitauth-hieoth",
                "pipelinesascode.tekton.dev/git-provider": "github",
                "pipelinesascode.tekton.dev/installation-id": "34493006",
                "pipelinesascode.tekton.dev/log-url": "https://console.redhat.com/application-pipeline/ns/rhtap-contract-tenant/pipelinerun/golden-container-on-push-ql68v",
                "pipelinesascode.tekton.dev/max-keep-runs": "3",
                "pipelinesascode.tekton.dev/on-cel-expression": "event == \"push\" && target_branch == \"main\"",
                "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                "pipelinesascode.tekton.dev/pipeline": ".tekton/build-pipeline.yaml",
                "pipelinesascode.tekton.dev/repo-url": "https://github.com/conforma/golden-container",
                "pipelinesascode.tekton.dev/repository": "golden-container",
                "pipelinesascode.tekton.dev/sender": "renovate[bot]",
                "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                "pipelinesascode.tekton.dev/sha-title": "Update registry.access.redhat.com/ubi9/ubi-micro:latest Docker digest to 4a2052e (#1181)",
                "pipelinesascode.tekton.dev/sha-url": "https://github.com/conforma/golden-container/commit/d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                "pipelinesascode.tekton.dev/source-branch": "refs/heads/main",
                "pipelinesascode.tekton.dev/source-repo-url": "https://github.com/conforma/golden-container",
                "pipelinesascode.tekton.dev/state": "started",
                "pipelinesascode.tekton.dev/url-org": "conforma",
                "pipelinesascode.tekton.dev/url-repository": "golden-container",
                "results.tekton.dev/recordSummaryAnnotations": "{\"repo\":\"golden-container\",\"commit\":\"d11c0ada39f18f631ff4f54beafa72a9b62dcd7c\",\"eventType\":\"push\"}"
              },
              "labels": {
                "app.kubernetes.io/managed-by": "pipelinesascode.tekton.dev",
                "app.kubernetes.io/version": "v0.31.0",
                "appstudio.openshift.io/application": "golden-container",
                "appstudio.openshift.io/component": "golden-container",
                "pipelines.appstudio.openshift.io/type": "build",
                "pipelinesascode.tekton.dev/check-run-id": "36929280665",
                "pipelinesascode.tekton.dev/event-type": "push",
                "pipelinesascode.tekton.dev/original-prname": "golden-container-on-push",
                "pipelinesascode.tekton.dev/repository": "golden-container",
                "pipelinesascode.tekton.dev/sha": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
                "pipelinesascode.tekton.dev/state": "started",
                "pipelinesascode.tekton.dev/url-org": "conforma",
                "pipelinesascode.tekton.dev/url-repository": "golden-container",
                "tekton.dev/pipeline": "golden-container-on-push-ql68v"
              }
            },
            "parameters": {
              "build-source-image": "true",
              "dockerfile": "Containerfile",
              "git-url": "https://github.com/conforma/golden-container",
              "hermetic": "true",
              "image-expires-after": "",
              "java": "false",
              "output-image": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container:d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
              "path-context": ".",
              "prefetch-input": "",
              "rebuild": "false",
              "revision": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
              "skip-checks": "false"
            }
          },
          "materials": [
            {
              "digest": {
                "sha256": "75cff96e239fb0669be73e94521be9703fc825272632c3f7a136efa8a04980c2"
              },
              "uri": "oci://registry.access.redhat.com/ubi9/skopeo"
            },
            {
              "digest": {
                "sha256": "4e53ebd9242f05ca55bfc8d58b3363d8b9d9bc3ab439d9ab76cdbdf5b1fd42d9"
              },
              "uri": "oci://quay.io/konflux-ci/git-clone"
            },
            {
              "digest": {
                "sha256": "fcf901ff1985e1d594bef9ee0992cd7e379152dd3e7181f5df6171770021678c"
              },
              "uri": "oci://quay.io/konflux-ci/yq"
            },
            {
              "digest": {
                "sha256": "80402886bbc0f6b4deba65cf5f66dfe9a2c01ae0b57bf3454e3ea58e1a395720"
              },
              "uri": "oci://quay.io/konflux-ci/cachi2"
            },
            {
              "digest": {
                "sha256": "3d8f5fe17878a5325bf276e89ecfc17ed6d22a18b49a6255ffdf498ce94d9802"
              },
              "uri": "oci://quay.io/konflux-ci/buildah-task"
            },
            {
              "digest": {
                "sha256": "523689a26c74790be67d6036820abfb9aa10bec6efff98cc1c9b74bd2f99eeb1"
              },
              "uri": "oci://quay.io/konflux-ci/icm-injection-scripts"
            },
            {
              "digest": {
                "sha256": "070ecb89de5104bb64fbf399a991a975e7d4d7e0cea0f7beb1e591b5591991c8"
              },
              "uri": "oci://registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9"
            },
            {
              "digest": {
                "sha256": "530d1932dc47d05da42a3a329a05eb30fe7105aa9e0d3f0d682dfa015e33b4ac"
              },
              "uri": "oci://quay.io/redhat-appstudio/hacbs-jvm-build-request-processor"
            },
            {
              "digest": {
                "sha256": "2d6db18c66a63502090d8555f737b91ce497d6598af2976cf792a90c3c6856a9"
              },
              "uri": "oci://quay.io/konflux-ci/sbom-utility-scripts"
            },
            {
              "digest": {
                "sha256": "91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8"
              },
              "uri": "oci://quay.io/konflux-ci/appstudio-utils"
            },
            {
              "digest": {
                "sha256": "9da8982d99263a7f1ee030340779ed7e7a5c95a0e82a535aeb3fe3eebc5b338c"
              },
              "uri": "oci://quay.io/konflux-ci/source-container-build"
            },
            {
              "digest": {
                "sha256": "3e2a8daead8ed5a1aa09878c74c2d5a7a77bdc1a946db5a6adb7ad238d813084"
              },
              "uri": "oci://quay.io/konflux-ci/konflux-test"
            },
            {
              "digest": {
                "sha256": "0e979f6498e4b257553b0daba26c9ca320d71289a874ee50500801fa39c07792"
              },
              "uri": "oci://quay.io/redhat-appstudio/tools"
            },
            {
              "digest": {
                "sha256": "4ee06e7d8bb3a9b9503f8f1293ee70c521aa51662e11335439b87f81bda6e246"
              },
              "uri": "oci://quay.io/konflux-ci/konflux-test"
            },
            {
              "digest": {
                "sha256": "59918a9c98125ad30bc3a542db931b0b62f43c6bcb04294b548413139fe8ac44"
              },
              "uri": "oci://quay.io/konflux-ci/clair-in-ci"
            },
            {
              "digest": {
                "sha256": "30d2037fa58653e9849a4ba60a69666dfca9b80a6807bbafd2dd5206c279a061"
              },
              "uri": "oci://quay.io/konflux-ci/oras"
            },
            {
              "digest": {
                "sha256": "275ecad6b3ba401d886abf67a5db82017e9254c2585f5e180f580070c82872b9"
              },
              "uri": "oci://quay.io/konflux-ci/clamav-db"
            },
            {
              "digest": {
                "sha256": "546edb7efb75a030ad292fb05e0321357f28516ce279c09d54965cadcdd44d2b"
              },
              "uri": "oci://quay.io/redhat-appstudio/tools"
            },
            {
              "digest": {
                "sha256": "a4546a8669dcb401a9edc05fcdc5eb3043050b6a827b44c3c907204d4dbe40f0"
              },
              "uri": "oci://quay.io/konflux-ci/konflux-test"
            },
            {
              "digest": {
                "sha1": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c"
              },
              "uri": "git+https://github.com/conforma/golden-container.git"
            }
          ],
          "metadata": {
            "buildFinishedOn": "2025-02-10T01:12:30Z",
            "buildStartedOn": "2025-02-10T01:05:06Z",
            "completeness": {
              "environment": false,
              "materials": false,
              "parameters": false
            },
            "reproducible": false
          }
        },
        "predicateType": "https://slsa.dev/provenance/v0.2",
        "subject": [
          {
            "digest": {
              "sha256": "1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b"
            },
            "name": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container"
          },
          {
            "digest": {
              "sha256": "2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32"
            },
            "name": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container"
          },
          {
            "digest": {
              "sha256": "7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a"
            },
            "name": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container"
          },
          {
            "digest": {
              "sha256": "73ae2f8be446b13b690346775d58890e1a576204f33196c84f8ae71e542769c0"
            },
            "name": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container"
          }
        ]
      }
    }
  ],
  "image": {
    "config": {
      "Cmd": [
        "/bin/sh",
        "-c",
        "/bin/sh"
      ],
      "Env": [
        "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      ],
      "Labels": {
        "architecture": "x86_64",
        "build-date": "2025-02-10T01:11:04",
        "com.redhat.build-host": "somewhere.over.the.rainbow",
        "com.redhat.component": "conforma-golden-container",
        "com.redhat.license_terms": "https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI",
        "description": "Trivial image build in compliance with Conforma policy",
        "distribution-scope": "public",
        "io.buildah.version": "1.39.0-dev",
        "io.k8s.description": "Trivial image build in compliance with Conforma policy",
        "io.k8s.display-name": "Conforma Contract Golden Container",
        "io.openshift.expose-services": "",
        "io.openshift.tags": "golden",
        "maintainer": "hacbs-contract@redhat.com",
        "name": "Conforma Golden Container",
        "release": "1",
        "summary": "Trivial image build in compliance with Conforma policy",
        "url": "https://github.com/conforma/golden-container",
        "vcs-ref": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
        "vcs-type": "git",
        "vendor": "Red Hat, Inc.",
        "version": "1"
      },
      "WorkingDir": "/"
    },
    "parent": {
      "config": {
        "Cmd": [
          "/bin/sh",
          "-c",
          "/bin/sh"
        ],
        "Env": [
          "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ],
        "Labels": {
          "architecture": "x86_64",
          "build-date": "2025-02-10T00:09:14Z",
          "com.redhat.component": "ubi9-micro-container",
          "com.redhat.license_terms": "https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI",
          "description": "Very small image which doesn't install the package manager.",
          "distribution-scope": "public",
          "io.buildah.version": "1.38.0-dev",
          "io.k8s.description": "Very small image which doesn't install the package manager.",
          "io.k8s.display-name": "Red Hat Universal Base Image 9 Micro",
          "io.openshift.expose-services": "",
          "maintainer": "Red Hat, Inc.",
          "name": "ubi9/ubi-micro",
          "release": "1739146154",
          "summary": "ubi9 micro image",
          "url": "https://www.redhat.com",
          "vcs-ref": "ee1c2d3ca22520c5352240e422088764c918ce5d",
          "vcs-type": "git",
          "vendor": "Red Hat, Inc.",
          "version": "9.5"
        },
        "WorkingDir": "/"
      },
      "ref": "registry.access.redhat.com/ubi9/ubi-micro@sha256:4a2052ef4db4fd1a53b45263b5067eb01d5745fdd300b27986952af27887bc27"
    },
    "ref": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
    "signatures": [
      {
        "keyid": "",
        "sig": "MEQCIFm92sTG/Fiyo4z7309BXcrOUxeipeInfFdJp0WIs9NbAiBfh2yDKpBnNotgIGhqjTpg7MVg6vH+0PljjGERTmPGvA=="
      }
    ],
    "source": {
      "git": {
        "revision": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
        "url": "https://github.com/conforma/golden-container.git"
      }
    }
  },
  "snapshot": {
    "application": "",
    "artifacts": {},
    "components": [
      {
        "containerImage": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b",
        "name": "-sha256:1e84b14580bc66c5c78b0f292bf987b2c314fc5ae3a580cf41b66f94651cf92b-amd64",
        "source": {
          "git": {
            "revision": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
            "url": "https://github.com/conforma/golden-container.git"
          }
        }
      },
      {
        "containerImage": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32",
        "name": "-sha256:2f9a00da367d58b021622b5510f8bfc8472f42f91c174d25ff001b84c4adcd32-arm64",
        "source": {
          "git": {
            "revision": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
            "url": "https://github.com/conforma/golden-container.git"
          }
        }
      },
      {
        "containerImage": "quay.io/redhat-user-workloads/rhtap-contract-tenant/golden-container/golden-container@sha256:7230c21e155f187a4cd8b10f2b38d3879e63febf94e5cb27ec4fb2095ff17f1a",
        "name": "",
        "source": {
          "git": {
            "revision": "d11c0ada39f18f631ff4f54beafa72a9b62dcd7c",
            "url": "https://github.com/conforma/golden-container.git"
          }
        }
      }
    ]
  }
}